<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reki家地下的大书架</title>
  
  <subtitle>ん…？べ、別に退屈とかしてないし…。してないんだから！ホントよ？</subtitle>
  <link href="https://blog.rekidunois.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.rekidunois.cc/"/>
  <updated>2023-01-19T12:59:32.944Z</updated>
  <id>https://blog.rekidunois.cc/</id>
  
  <author>
    <name>Reki Dunois</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022娱乐年中总结</title>
    <link href="https://blog.rekidunois.cc/2023/01/2022-entertainment-review/"/>
    <id>https://blog.rekidunois.cc/2023/01/2022-entertainment-review/</id>
    <published>2023-01-18T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>又是一年过去了。我依旧觉得年终总结这种东西太过沉重。我很喜欢看别人总结的东西，但是总觉得自己没办法对过去一年自己的全部东西作出总结。</p><p>不过，还好是有一些并不沉重的东西。比如说可以先总结一下自己在娱乐方面做了什么事情，顺便回顾一下去年令我印象深刻的一些东西。</p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>这一年感觉游戏少打了不少，特别是新的并且打得时间长的游戏。</p><p>头几个月打了不少的麻将，没记错的话天凤终于升级到二段，也就是似乎不会被官方收回账号的段位了。</p><p><img src="/images/blog/2023-01-19-19-55-05.png" alt=""></p><p>但是我雀魂不知道为什么又变回初心者了。</p><p>二月份因为换了mac，所以打了很多（能在mac上跑的）独立小游戏。这里面最推荐的就是「风来之国」，它真的很优秀。有趣味的小游戏和解密，剧情和游玩的节奏配合得很好，不会让人觉得无所适从，配乐也很棒。</p><p><img src="/images/blog/2023-01-19-20-01-33.png" alt="可以看出是体量非常小的游戏"></p><p>三月份的时候买了几个3A，玩得最多的是「艾尔登法环」和「怪物猎人·Rise」。</p><p>猛汉还是一如既往得好玩而且肝。不知道是不是为了照顾switch，升的特效比世界少了不少，在电脑上也流畅很多，帧数提升不少。这也让我能看到很多以往在世界里看不到细节。它里面的很多机制也让我忘记了不少枯燥的肝过程。我可以切实地一边练习太刀一边推进剧情，而不是因为有个粪怪挡在路上而必须换成其他好打的武器继续推进，或者装备不足而不得不去刷别的怪。</p><p><img src="/images/blog/2023-01-19-20-03-21.png" alt=""></p><p>法环是我头一次玩纯正的魂系列游戏，虽然我觉得只狼也很优秀，但是和环对比起来确实只狼的「魂味」没那么浓。而法环真的非常好玩。这一作非常适合没有玩过魂游戏的玩家来体验魂到底是个啥样的东西。虽然到后期慢慢你需要刷魂才能比较轻松地过关会让人难受，但是到了那个时候你一定已经度过了非常充实的游戏时间，而这绝对值得。法环也同样配得上年度最佳游戏的称号。宫崎英高，再次登上神坛。</p><p><img src="/images/blog/2023-01-19-20-00-23.png" alt=""></p><p>四五月份没记错的话ow2突然说要开始测试，以前玩ow的朋友们都纷纷活跃了起来，但是我依旧是被pvp里的元素气到，而且主要还是我太菜了。只是射击游戏这个射爆一切的瘾一旦勾起来，你就非得射爆点什么。于是我购入了无主之地3。无主之地3的3d眩晕部分控制得很好，我玩了很长时间基本都不会晕。但是据说二代是非常晕的，我也没有尝试过。虽然我只是打完了主线，看起来我也体会到了pve射击游戏刷刷刷的快感。如果还有大块的空闲时间，我非常希望再在无主之地里继续刷刷刷。</p><p><img src="/images/blog/2023-01-19-20-04-08.png" alt=""></p><p>在这之后就没有怎么玩游戏了。到七月份入坑了Master Duel，我认为（在那个时候还）多样化的MD环境玩得还是非常开心的。哪怕是后面更到烙印版本，我还是摸出了骚灵地中族之类的卡组玩得很开心。所以看游戏王的一个环境好不好玩，其实还是看能不能在里面玩想要玩的游戏。</p><p>在那之后到十二月，首先是回坑了砍口垒。然后我居然坚持了一段时间每天清掉日常任务，并且打掉x图，周常月常什么的都有好好清理，现在想想还真是不可思议。</p><p><img src="/images/blog/2023-01-19-20-09-05.png" alt=""></p><p>之后跑去买了xcom换皮的战锤游戏，玩得很爽。毕竟xcom玩法比较成熟了，照抄换皮不会出什么太大的差错。在疫情之下抗击纳垢入侵还是很有代入感的。</p><p>今年的年度3A是法环没跑了。但是今年的年度游戏我觉得还是要给MD。确实非常好玩。</p><h2 id="nas"><a href="#nas" class="headerlink" title="nas"></a>nas</h2><p>今年搞了一个硬盘柜和一个戴尔工控机，于是可以组一个拖拉机 NAS 。我直接上了debian，然后用docker跑了emby。把很多以前的动画电视剧之类的视频都刮削好了之后，在emby首页看还是非常舒适的。而且它的播放历史功能也非常好用，如果看着看着想要躺床，我只要暂停然后就可以直接在iPad上接着看，很舒服。</p><p>这个戴尔工控机也成为了我要折腾一些东西的优秀载体。上面还放了给mac备份的时间机器，以及开了一个AirPlay Server，以便我回家之后把听着的音乐drop到音响上。</p><h2 id="电影，电视剧，动画"><a href="#电影，电视剧，动画" class="headerlink" title="电影，电视剧，动画"></a>电影，电视剧，动画</h2><p>今年久违地又去电影院里看了一次柯南。这一作还算是中规中矩，跟绀青之拳差不太多。</p><p>其他的电影方面，我回顾了好几遍律政英雄的剧场版，果然是优秀的剧本。然后也是重新看了一遍「CodeBlue」的剧场版，感觉剧场版的医疗戏份还真实少了很多啊，跟我当时看的时候结论一样，更重要的是交代主角们今后的发展，而且他们都已经成长为成熟的医生了，很多前作里的医疗桥段都没法上演了。</p><p><img src="/images/blog/2023-01-19-20-18-58.png" alt=""></p><p>电视剧我记得去年我是基本没怎么看日剧了。今年因为看了一段粤配的「非正常死亡」，然后就跑去重温了很多日剧，然后也看了一些日剧的续集，比如说「Byplaers」。第二季感觉还是因为大杉涟的去世，多少有点虎头蛇尾。而第三季和剧场版给人的感觉就是去掉了非常多的戏剧性桥段，而是讲述了更多他们作为演员而遇到的一些事情。当然，全部都是虚构的，艺术高于生活嘛。</p><p>剩下的日剧就是雷打不动的「孤独的美食家」了。前段时间找齐了所有的番外篇，基本上也都是东京电视台为了跨年而准备的节目，看着很安心，明年看看要不要在年三十晚上鉴赏一下。</p><p><img src="/images/blog/2023-01-19-20-15-02.png" alt=""></p><p>看粤配可能也是因为看了一段时间的「外来媳妇本地郎」。现在看它依旧是很优秀的作品，剧情都集中在当时人们所能遇到的日常生活中，并且将它戏剧化，演员的演技也在线。但是这样的市井生活真的很难继续存续了，你可以从他们的剧情中看出非常多把不合理当合理的地方，这是当时的现状，这些现状也是当时人们生活的一部分。可惜或者不可惜，随着社会经济和生产力的发展，很多东西都成为过去式了。</p><p><img src="/images/blog/2023-01-19-20-20-25.png" alt=""></p><p>而在风雨飘摇的2022年，我还是要把我的年度最佳日剧颁给在平凡中给予人力量的「我要准时下班」。这是一个听名字就知道社畜非看不可的剧集，虽然是2019还是2018年的剧，但是在疫情过后的三年，我觉得它所讨论的很多问题都还没有得到充分的解决。再看一遍还是让人感觉到「准时下班」这四个字能够给予人的救赎和力量。</p><p><img src="/images/blog/2023-01-19-20-21-32.png" alt=""></p><p>动画方面。在当拉拉人的那段时间内终于是补完了水水动画，联想到星团的动画质量，我只能说制作组真的不能迷信花田了，他真的未必想或者能写出另一个优秀的故事，人的创作灵感是会枯竭的。</p><p><img src="/images/blog/2023-01-19-20-23-45.png" alt=""></p><p>星团的整个企划风格就给人一种精致的原宿可丽饼的感觉。从演出到编曲，还有服装。可惜，剧情确实不怎么样。正如剧中台词所言：「特別すごい才能があるスターが集まっているってわけでもないし、普通の子が一つになって、何かを突破しようって感じもないですか」，她们不能说非常平凡，但是也不是特别亮眼，起步的时候处于不上不下的状态。然而这个状态的角色，故事是最难写，也最难写好的。</p><p><img src="/images/blog/2023-01-19-20-29-14.png" alt=""></p><p>不过对我来说，音乐好听就非常好了，第二季的音乐也非常在线，所以官方赶快出新曲啊！</p><p>抽空看完了「赛马娘」第二季，这真的是一部让我提起名字就开始鼻子泛酸的作品。最后的奇迹复活实在是太燃了。</p><p><img src="/images/blog/2023-01-19-20-30-27.png" alt=""></p><p>因为鬼头明里补了不少番，但是感觉大部分番还真就是只能冲着鬼头明里去看的，比如「虚构推理」和「总之就是很可爱」。当然除此之外还有一些其他的作品有别的看点，比如「天使降临到我身边」和「地缚少年花子君」。只是总的来说都很爆米花就是了。高情商：舞台不够大，没法展现我鬼头姐的配音实力。</p><p>重新过了一遍地错，这个作品居然如此长寿简直不可思议。大家都喜欢开大车吗？松冈可不是当年的松冈了，但是贝尔君却还是一脸小正太的样子。22年7月没记错是第四季，还没来得及看。</p><p><img src="/images/blog/2023-01-19-20-33-06.png" alt=""></p><p>打牌的那段时间终于是补完了初代游戏王，然后陆续看完了GX，剩下的看了一部分就没啥兴趣了。初代的游戏王还是好看的，就算口胡印卡，它也是我心目中最燃的游戏王。而GX…前面我刚好写了一篇<a href="ygo-gx">GX的评价</a>, 感兴趣的话可以翻翻看。</p><p><img src="/images/blog/2023-01-19-20-35-41.png" alt=""></p><p>前段时间终于看完了鬼灭的游郭篇，有网飞还真是方便啊。最后我感觉这个boss真的是上弦吗…跟杀掉大哥的那个完全不是一个级别的感觉。但是仔细一想，这个上弦的硬实力先不说，双生体的设定其实很符合当前的剧情发展。我曾经比较担心，在无限列车篇就上了那么强的boss，还斩杀了我方大将，鬼灭后面的剧情会不会很难解释，但是双生子的设定，其中一个比另一个强的设定其实很好地能让主角三人上场。因为如果又来一个猗窝座级别的boss，然后你让主角三人和他打得有来有回，就搞得好像在黑大哥一样。当然最后的结局总是让我感觉少了点什么，可能提起鬼灭，心思还停留在无限列车篇，有点贤者时间吧。</p><p><img src="/images/blog/2023-01-19-20-36-30.png" alt=""></p><p>作为手机游戏，我今年唯一一部在手机上看完的动画是明日方舟。看完之后我才发现，原来剧情讲了的是这个啊。接下来新作的剧情慢慢会变得精彩，希望制作方不要抱着「只要对话里的角色动起来观众就会买账」的心态制作。设定方面，我可能是二创沙雕博士看多了，有什么粤西佬博士，南通博士，福瑞控博士，炼铜博士，搞得我对博士这个角色有一种很不正经的印象，所以对动画里这个博士多少有点疏离感。我反而觉得他拿石头丢人的那一幕更加贴合我对博士这个角色的印象。</p><p><img src="/images/blog/2023-01-19-20-37-40.png" alt=""></p><p>今年的年度动画？那当然还是「赛马娘」第二季了。从音乐到剧本都是一流水准，最后的复活正如历史上的那个复活一样，只要稍微在脑子里勾起一点点回忆，那一声「东海帝王」的惊呼，鼻子就会忍不住开始泛酸。听说还有第三季？</p><p><img src="/images/blog/2023-01-19-20-38-54.png" alt=""></p><p>总结一下：</p><ul><li>年度电影：律政英雄剧场版2004</li><li>年度电视剧：我要准时下班</li><li>年度动画：赛马娘第二季</li></ul><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><p>今年真的听了很多鬼头明里，苹果的年终总结说我听了三万分钟的音乐，里面起码有一万分钟是在听鬼头明里。鬼头姐新专辑里有不少很帅的歌，单曲里的「Closer」也非常非常帅。鬼头姐一直是尝试代入歌曲然后唱歌，但是我更希望她能多用本音去唱帅气的歌曲。</p><p><img src="/images/blog/2023-01-19-20-39-21.png" alt=""></p><p>在Apple Music上发现了LoveLive电台，于是在里面找出了很多很多好听的歌曲。今年听的最多的团应该是星团和水团了。水团的solo特别好听，你逢田姐的「Love Spiral Tower」也入选了最高播放数的几首单曲之一。以及Guilty Kiss的小组曲也很棒（逢田姐：哟↗️️）。</p><p><img src="/images/blog/2023-01-19-20-41-05.png" alt=""></p><p>星团虽然动画拉胯，但是音乐还是非常非常在线的。一期的时候就给出了「ノンフィクション！！」这样的的优质曲，其中的C/W曲「Day1」我非常喜欢。在一期到二期之间，BD的特典曲也非常棒，我很喜欢唐可可和叶月恋的双人曲「クレッシェンドゆ・ら」，歌词的甜度突破天极，不知道三巡他们唱了没有。</p><p><img src="/images/blog/2023-01-19-20-41-50.png" alt=""></p><p>而二期的歌曲，简直可以用神来形容。从最开始的「We Will」「スター宣言」，到「ビタミンsummer」「Chance Day, Chance Way!」「POP TALKING」，基本上每一首都很好听。尤其是C/W曲的「POP TALKING」，可以算是Liella独特风格的集大成之作了。三巡开始可能没什么时间排练新曲，但是我还是想听更多他们的曲子。</p><p><img src="/images/blog/2023-01-19-20-42-27.png" alt=""></p><p>之后听的多的就是虹团。作为魔爪少女（不是）们的箱推，其实我对二单的K-POP路线稍微有些失望。只是同样是K-POP，特典曲的「Look at me now」还是很抓我耳朵的。除了一单以外，插入曲的三首歌也成为我今年播放做多的一张专辑。「stars we chace」，梦回2011。「Eutopia」，这地球就是绕着菜宝转！「EMOTION」，成功对我造成EMOTIONAL DAMAGE。非常优秀的三首歌。</p><p><img src="/images/blog/2023-01-19-20-44-20.png" alt=""></p><p>除此之外还听了Pay子翻唱的「妄想感傷代償連盟」，不知道为什么，听完这首歌之后就觉得「冬の花」跟它很配，连Apple Music都记住了我的习惯。</p><p>碟也算是买了不少，其中值得一提的就是CrosSing做的翻唱专辑。这张碟其实都可以在油管听，但是买碟会附赠花泽香菜翻唱的「Rain」。秦基博的曲子加上香菜的嗓音，完全值得一个月的物流等待。</p><h2 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h2><p>想给这篇文章做点插图的时候，发现mac的剪贴板和我理解的有所不同，从tg里复制的图片不能直接触发vscode的图片粘贴插件功能…</p>]]></content>
    
    
    <summary type="html">又到了翻自己频道的时候</summary>
    
    
    
    <category term="阶段总结" scheme="https://blog.rekidunois.cc/categories/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="生活" scheme="https://blog.rekidunois.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="年终总结" scheme="https://blog.rekidunois.cc/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>「游戏王GX」是一部什么样的游戏王动画？</title>
    <link href="https://blog.rekidunois.cc/2022/08/ygo-gx/"/>
    <id>https://blog.rekidunois.cc/2022/08/ygo-gx/</id>
    <published>2022-08-02T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="当我们看游戏王的时候我们想要看什么"><a href="#当我们看游戏王的时候我们想要看什么" class="headerlink" title="当我们看游戏王的时候我们想要看什么"></a>当我们看游戏王的时候我们想要看什么</h1><p>如果是看完「游戏王DM」之后来看 GX 的人————这也是当年作品出现顺序和故事发生的时间顺序————一定会觉得非常别扭。DM 是一部纯粹的热血少年番，一个纯粹恶的反派，一个展现人性光辉的主角团，最后正义战胜邪恶。</p><p>然而 GX 完全不是这个样子。GX 是一部打着热血番的旗号，实际上在输出编剧自己的狗屁不通的人生哲理的作品。非要拿一部作品来对比的话，额，「美末2」？</p><blockquote><p>以下内容会涉及剧透</p></blockquote><p>挂羊头卖狗肉的问题自不必说，我想很多人都会聚焦于异世界篇中，主角游城十代的心境慢慢变化的问题。编剧给十代之后的历程奠定了一个基调，那就是佐藤老师所说的「看见垃圾而不去捡起来的人有罪，还是看不到垃圾的人有罪」，十代在之后的篇章里通篇都在思考这个问题。最后他给出的答案是，看不见垃圾的人有罪。为了不要做一个看不见垃圾的人，我要黑化，然后就变成了霸王十代。</p><p>为什么说这种剧情非常小家子气，这个问题其实和隔壁 MCU 的灭霸一模一样。漫威原作的灭霸塑造非常丰满，有灭霸跟死亡女神的一条主线在，到最后灭霸杀光宇宙生灵看起来都非常合理————他老婆就是死亡女神嘛。</p><p>但是 MCU 的灭霸没有这个主线，他要打响指的动机是为了让人们的生活变得更好————因为物资不够这么多人口生活，所以物资不变，人口减半的话，剩下的人一定生活得更好。MCU 的灭霸就以这个逻辑支撑着自己的各种行动。</p><p>这里的问题在于，灭霸和十代————或者说给出提问的佐藤老师定下的基调「十代就是看不到垃圾的烂橘子」，他们对于问题的答案根本就是错误的。</p><h2 id="霸王和灭霸"><a href="#霸王和灭霸" class="headerlink" title="霸王和灭霸"></a>霸王和灭霸</h2><p>MCU 灭霸和塑造他的编剧不懂，生物在达到环境承载力之后的增长值会趋于平缓，但是在达到环境承载力之前，增长速度最快的是什么时候呢？大概是达到环境承载力一半的时候————没错，这是高中生物学。所以他打响指让一半人口消失，毫无卵用。也许短期内人们会发现人均资源确实便多了，但是恢复到打响指之前的日子不会很长，也许不到一代人的时间，人口就马上重回高峰了。编剧想当然地写出了「卡魔拉的星球被屠了一半，剩下的人会生活得很好」这种屁话，而 MCU 灭霸是秉承着这种放屁逻辑去行动的，自然会让人觉得他的行为不正常。</p><p>十代也是一样。「看不见垃圾的人」有罪也是屁话。因为看得见垃圾的人以后肯定会去把垃圾捡起来，所以问题就不存在了。这不是什么成年人社会的逻辑，这恰恰就是年轻人才有资格享有的特权。因为年轻人有的就是时间，有试错的资本，所以一开始看不见，并不可怕，之后弥补就好了。</p><p>问题并不在于能不能看见垃圾，问题是在于，怎么样才能避免垃圾不被捡起来。看得见和看不见垃圾都不去捡，明显是看见垃圾都不去捡的人有问题，所以一般的行业和社会会对这种人施加惩罚————这里的「垃圾」是代指。而且这种惩罚也是权责对应的，比如说你作为飞行员，你看到有飞行隐患却不去解决，就属于「看见垃圾却不捡起来」。但是如果是你没有看到飞行隐患，这是属于「看不见垃圾」，这样的飞行员有罪吗？</p><p>在制定整个航空业的工作流程和规章制度中，就会开始充分考虑到这样的问题。不同岗位的人员，都会有相应的培训流程，确保他们在真的参与操作的时候，知晓自己每一步应该做什么，什么样的现象是做的对，什么样的现象是有问题，发现了问题应该做什么，用规章制度和设备来规避「看不见垃圾」的问题。在这样的体系下，如果真的出现了「看不见垃圾」的情况，那么那个看不见垃圾的人，一定不会担上主要责任————因为不是他自己看不见，而是整个系统设计有漏洞。</p><p>比方说起飞前的准备，需要依次检查的东西可能有 1 2 3 4 5 若干个事项。但是如果依靠人脑去记忆，那么难免会出现忘记的时候。所以会增加副驾驶，有些航班还会再增加一名飞行员坐在两名驾驶后面帮他们确认事项。但是这样还是不够————三个人一起出错的情况也是有的，而这样的时候也许就会导致大型空难的发生。</p><p>为了避免这样的情况，航空业界的应对方式也很简单朴素：把起飞前要检查的东西写在一张列表上，在起飞之前，让飞行员对着这张表一一确认，事后，如果发现这张表没有正确地被填写就起飞的话，机组会受到相应的惩罚。这样就最大程度地避免了因为起飞时没有按照规定检查而酿成的灾祸。而在这个系统里面，「看不见垃圾」是不会成为被处罚的理由的，「看见了却不去捡起来」才是，比如说你随便乱填那张确认用的表，或者压根就没有填。</p><p>没错，十代就是因为想要成为一个不会「看不见垃圾」的人而黑化，在我看来就是莫名其妙。并且，期望一个全知全能的人不会看不见任何垃圾，本身就是热血少年番的套路，前面既然已经说过了 GX 是挂羊头卖狗肉的非少年番，那为什么最后还是往这个套路走？这就引申出了之前说的：编剧的小家子气。他不想写好一个故事，只是想输出自己的价值观。</p><h2 id="乔尔和万丈目-明日香"><a href="#乔尔和万丈目-明日香" class="headerlink" title="乔尔和万丈目/明日香"></a>乔尔和万丈目/明日香</h2><p>输出价值观无可厚非，小岛秀夫的「死亡搁浅」里面最重要的价值观也是「人与人之间的连结很重要」，并且游戏的叙事和玩法都在围绕着这个价值观服务。</p><p>那么，为什么又说 GX 要和美末2作对比呢？美末2要表达精神变态先生的「原谅」价值观，所以乔尔必须死。怎么死的，不重要，直接降战斗力然后拿高尔夫抡就完了。不是说乔尔不能死，这样死法我完全没有看到精神变态对乔尔有半点的尊重。乔尔完全就是他手上的工具人，为了输出他自己的价值观而推动剧情的工具人。</p><p>异世界篇里的本校队友，就是这样的角色。在日常篇和光之结社篇里，几位配角已经有相当程度的塑造，特别是万丈目。然而进入异世界篇，他们就直接被强行降战斗力————甚至更糟，牌都不能打了。然后为了推动剧情，把他们做掉，责任丢到十代头上，十代就会黑化，黑化了剧情就能继续推动，剧情继续推动就能输出编剧的小家子气价值观。那么为什么要这么干？没有为什么。不这么干编剧就写不下去了。这就是编剧既无能，又想输出自己的价值观的体现。</p><p>编剧完全没有对几位本校队友有任何尊重，外校的几位虽然非常靠谱，然而也只是推动剧情的工具人罢了，用完就丢。为的就是让十代一个人背负着输出他自己价值观的任务而独自前行。借用一位知乎用户的回答：</p><blockquote><p>再怎么想突显主角的成长的艰辛，也有很多更高明的方式，而不是强行作贱其他配角强行抬高主角。</p></blockquote><p>这就是为什么我觉得这部作品要和美末2相提并论。这两部作品的编剧，都没有对剧中的角色有足够的尊重，如果创作一个作品，是编剧可以自己随心所欲让角色干什么都可以的话，这样的角色是死的，不会被称为「有血有肉」。</p><p>编剧塑造出了一个人物之后，如果要让这个人物真的立体起来，而不只是一个虚拟角色，编剧就不能随心所欲，而是要让角色按照自身的设定来行动或者变化。为什么「刀剑神域」的作者川原砾老师觉得自己不能强行让死去的角色复活————即使设定上并非不可能————就是因为死去的角色作为一个塑造完成的角色是完整的，立体的，按照他的设定行动的情况下，他做出的选择确确实实会导致他的牺牲。为了不让他的牺牲白费，为了维持他的「人设」，不能随随便便就复活死去的角色（对没错他说的就是优吉欧）。</p><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><p>这部剧最大的问题就是编剧对角色的尊重问题。其他的小问题当然也不少。比如说配乐问题，光之结社叙事过于松散的问题。GX 作为 DM 之后的游戏王，做到的事情仅仅只是完善了当时的游戏王实体卡的规则和流程罢了。从剧情的角度来说，完全没有办法和 DM 相提并论。如果是打牌之余想要看动画的话，我推荐直接跳过这一部去看后面的作品。</p><h2 id="自己的私心"><a href="#自己的私心" class="headerlink" title="自己的私心"></a>自己的私心</h2><p>也不知道为什么，我对明日香这样的角色总是没有什么抵抗力。但是明日香的角色命运，自然也被编剧工具人化了。强行在异世界篇被除外，回来之后和十代就已经「隔了一层可悲的厚障壁」了。最后还给明日香设计了个互发好人卡的傻逼剧情恶心人。不想做可以不要做，观众当然能理解这俩人不能在一起，但是你不但要把这件事拿出来说，还要大声在观众面前炫耀「看我写的剧情，他俩吹了，快看快看，多好」是tm什么意思？为什么我说编剧对角色毫无尊重，这里也能看得出来。</p>]]></content>
    
    
    <summary type="html">看完就能知道，能写出 DM 的高桥和希老师是不可能写出这种小家子气的剧情的</summary>
    
    
    
    <category term="随笔" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="动画" scheme="https://blog.rekidunois.cc/tags/%E5%8A%A8%E7%94%BB/"/>
    
    <category term="游戏王" scheme="https://blog.rekidunois.cc/tags/%E6%B8%B8%E6%88%8F%E7%8E%8B/"/>
    
  </entry>
  
  <entry>
    <title>近况总结</title>
    <link href="https://blog.rekidunois.cc/2022/02/recent-status-2022-02-24/"/>
    <id>https://blog.rekidunois.cc/2022/02/recent-status-2022-02-24/</id>
    <published>2022-02-23T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天去找新房子的房东拿钥匙，我比他先到，所以在等。旁边有小摊在卖章鱼小丸子，刚好是饭点我也饿了，所以就点了一份。没想到摊主是一位聋哑人，打着手势一边告诉我 10 块钱一份，一边问我要放什么酱。</p><p>点完之后我还发现，摊主开着微信视频，看来是有人和摊主视频交流，顺便在客人无法交流的时候让视频对面的人帮忙说话。所以我在旁边一边吃，一边帮摊主招呼了一下其他的顾客。</p><p>摊主做的章鱼小丸子，说实话味道一般。有炸糊了的地方，感觉火候也煮过头了。撒料撒得特别多，海苔的味道都盖过了小丸子本身的味道。</p><p>摊子的后面就是一个商业中心，前面有一个喷水池，上面写着财富港三个字。喷水池的另一边，是一群人在排队等核酸检测。天气非常冷，风吹到手指和脚都失去了知觉，甚至我踩了十几分钟单车也无济于事。</p><p>回去的路上，我还迷路了，结果多花了半个多小时，回到家已经快八点半了。</p><p>第二天，公司写字楼表示只有 48 小时内核酸阴性者才能进入，大家聚集到楼下的麦当劳商量对策，HR 和行政发消息说，大家先去做核酸，今天远程办公，我和室友跑了挺远的，好不容易做好了，大冷天里衣服都湿透了。</p><p>然后我打的去交通局指定的一个医院，做了驾驶证体检，回家之后申请了更换驾驶证。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>新年之后我一直处于似忙非忙的状态。室友要离职搬家，所以我开始找房子，踩着单车整个区跑，好歹是看到了一个喜欢的房子，姑且是定下来了，但是还要等到三月中旬才可能会搬，到时候这边的房子也不知道房东那边会怎么处理，最坏的结果可能是押金无了。</p><h2 id="世界局势"><a href="#世界局势" class="headerlink" title="世界局势"></a>世界局势</h2><p>今天，俄罗斯总统普京宣布对乌克兰进行「特别军事行动」，整个早上都在刷相关新闻，一会儿说特种部队控制了基辅机场，一会儿说乌克兰军队指挥部被击毁。</p><p>一时间，战况与地狱笑话齐飞，我们见证了第一场有短视频直播的现代战争。</p><h2 id="程序员的自我修养"><a href="#程序员的自我修养" class="headerlink" title="程序员的自我修养"></a>程序员的自我修养</h2><p>学会了在 workers 里写代码，写了一个小 api，请求当天的必应壁纸并且返回，之后准备加上个宽高选项。</p><p>成功在 heroku 部署了 miniflux，虽然这个其实做过，但是我总算搞明白，如何防止免费 dyno 冻结 miniflux 了。其实也很简单，在 heroku 里部署一个定时的 add-on，每 10 分钟，指定 cookie 的情况下 curl miniflux 的刷新 url，有 cookie 的情况下就能正常触发 miniflux 的刷新行为，这样就不会因为被冻结而更新不及时了。</p><p>准备开始系统性学习如何使用 GitHub Action 来在自己的 vps 里部署数据库和自己写的 bot，达到提交代码后自动测试，构建 docker 并且部署的效果。</p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>第四个号的麻将对局数达到了 70 个半庄战，升到了 2 级。系统数据显示 1 级玩家的平均对局数有 360 场，看来我还需要多打多练。</p><p>我 pc 彻底无法启动，现在不知道是内存的问题还是主板的问题，所以在 steam 上买了不少能在 mac 玩的小游戏。前段时间通关了风来之国，很好玩，但是流程确实也不算长，并且没有 end-game 玩法。</p><p>跟朋友合资租了一个 mc 服务器，可惜 1.18 版本的工业 2 有 bug，不能玩工业 2 了，有点缺少目标。但是我看他们玩原版的很多东西也做得很爽。</p><p>因为找房子太忙了错过了阴云火花活动。</p><h2 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h2><p>自己今年过完生日也 25 岁了，感觉毕业之后时间过得真的飞快，每天盼着周末，过完周末盼下一个周末，盼着盼着三年就快过去了。毕业的时候给自己定的三年之约，我感觉自己确实比刚毕业那会儿懂的多了点，但是真要做点什么的时候，又感觉自己啥也不懂。但是害怕麻烦这个特点，似乎没怎么变过。</p><p>好消息是我写博客和阅读的习惯倒是坚持下来了。虽然博客没啥有用的内容，阅读也只是阅读一些新闻而已。总归不算是坏事吧。</p><p>下个月要搬家，我要好好布置一下桌面，可能要按照笔记本的使用习惯去修改布局。房间里其他的东西也要好好规划。然后就是要去体检，希望工作一切顺利吧。</p>]]></content>
    
    
    <summary type="html">没有阶段成果，但是有阶段目标</summary>
    
    
    
    <category term="阶段总结" scheme="https://blog.rekidunois.cc/categories/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="生活" scheme="https://blog.rekidunois.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>2021 玩啥游戏</title>
    <link href="https://blog.rekidunois.cc/2022/02/2021-games/"/>
    <id>https://blog.rekidunois.cc/2022/02/2021-games/</id>
    <published>2022-02-13T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每年结尾都想写年终总结，但是总是发现自己只剩下最近几个月的回忆了。偶尔看到了机核发的一篇 <a href="https://www.gcores.com/articles/146544">游戏总结</a>，就想着我也可以先总结一下一年玩了什么游戏再说。</p><h2 id="一月：模拟经营"><a href="#一月：模拟经营" class="headerlink" title="一月：模拟经营"></a>一月：模拟经营</h2><p>21 年一月的时候还没过年，那时候除了玩明日方舟，还入手了「纪元 1880」。作为一个模拟经营游戏它是非常优秀的。不像「文明」系列，纪元的重点侧重于种田，它的大部分升级和建造都是为了种田。从农业到工业，从聚居点到工业城市，你可以亲身体会在工业革命中，生产方法和生产关系对社会产生的影响。普通的聚居地居民，有鱼吃，有酒喝就满足了。工坊的工人则需要为他们制造肥皂之类的日用品，饮食方面也需要更多类似于香肠面包啤酒之类的比较复杂的工业制品。</p><p>侧重点都在种田上确实是我喜欢的玩法，但是我对纪元不满的一点就是，它的外交和战斗部分一直在对我种田的玩法造成打扰。我开矿开得正爽呢，有一个 npc 因为他爸爸死在了矿井里，所以就谴责我，并且后面发展到向我开战，实在是体验很差。所以后面我都直接关掉 npc，自己种田玩。</p><h2 id="二月：麻将和-XCOM"><a href="#二月：麻将和-XCOM" class="headerlink" title="二月：麻将和 XCOM"></a>二月：麻将和 XCOM</h2><p>也许是因为过年回家带回去的设备上没什么游戏好玩，所以这两年过年我都在打麻将。当然麻将也是有很多种类的，比方说练实力的麻将游戏天凤，二次元麻将游戏雀魂，当然还有著名的艾泽拉斯麻将——「炉石传说酒馆战棋」</p><p>酒馆战棋的环境今天和当年实在是不可同日而语，当年甚至没有 ban 种族的说法，每把都有圣盾鱼。然而经过一年的版本迭代，当年的很多套路都已经消失了。但是现在的战旗和隔壁构筑模式一样，越来越超模，越来越炫酷了。野兽可以复生，在战斗的途中可以突然变出一个毒来。虽然变得更加炫酷，但是也有很多一成不变的东西，比方说毒依旧是吃鸡阵容中不可缺少的一环。甚至没有鱼人没有野兽的情况下，也有搜融合怪进化盾毒的选项。</p><p>我个人是认为毒的获取方式过于单一会导致阵容过于同质化的。就和当初删掉三本的融合怪一样，当年三本融合怪大家都想要，就是因为啥套路都能塞进去让他吃 buff，后来就被删掉了。</p><p>其他两个麻将呢，雀魂我只打到了雀士，天凤我已经第四个号了，还是没有升到三段。让我看看今年过年能不能看完 79 博客吧（</p><p>xcom2 作为战棋类游戏来说，素质还是很高的。非常能让你享受战棋这一游戏模式的快感。但是战棋游戏的挫败感还是不低，任务失败，干员（？）阵亡，都让这款游戏充满了意外和懊悔。当然了，如果你技术过人，打一步算五步，是非常能够弥补这些问题的。所以说，菜是原罪。</p><h2 id="三月：明日方舟和三位一体"><a href="#三月：明日方舟和三位一体" class="headerlink" title="三月：明日方舟和三位一体"></a>三月：明日方舟和三位一体</h2><p>三月份明日方舟上线了广受好评的彩六联动，彼时我的练度还很差，打进化的本质是相当折磨的。但是好消息是我似乎没有氪金就出了限定的所有角色。当时高光的夕没有练好，不然可能会轻松不好。</p><p>三位一体则是我一直以来都很喜欢的横版跳跃解谜游戏。这次出到第四代，游戏的画质，建模和音乐依旧很出色，但是战斗难度明显提升了很多。打到某个 boss 之后卡关中。</p><h2 id="四月：浅尝则止的……"><a href="#四月：浅尝则止的……" class="headerlink" title="四月：浅尝则止的……"></a>四月：浅尝则止的……</h2><p>四月游戏挺多的，但是实际上都是只玩了一点。体量很小的「subverse」很快就打通了，当然这个游戏重点并非玩游戏而是……</p><p>「暗黑地牢」买了很久了，游戏真的很好玩，美术做的也很好。但是这游戏确实要学的东西太多了。老陈的新手教程都做了 10 几 p，而我头几 p 都还没有完全看完。现在 2 都出了，不知道何年何月才有机会通关。</p><p>然后就是本 p 社战犯涂色成功了一次群星。群星还是很好玩的，可以算是现在 p 社人气最高的游戏之一了。因为它 dlc 其实不多，而且机制又足够有趣，上手也简单，不管是策略类游戏的老玩家还是新玩家，都适合玩这款游戏。</p><p>不过我觉得我玩这类游戏的问题一直都是，只要通关一次之后，就不想再打了。其实没什么道理，因为重开一局应该是相对不同的游戏体验，但是我重开之后，通关那一局费劲拿到的 buff 和积累，全都没了，要从零开始，这一点也许让我有点不爽吧（</p><h2 id="六月：砍口垒"><a href="#六月：砍口垒" class="headerlink" title="六月：砍口垒"></a>六月：砍口垒</h2><p>没想到吧，1202 年还有人打砍口垒。</p><p>六月应该算是初夏活，但是对于这个游戏我确实很少有时间天天玩了。所以临活动结束上去选低难度无双了一把。隔壁总有人在叫嚣啊你们选丙的也不好打，咸鱼的末日来辣，桀桀，然而本老咸鱼还是一路丙无双过去了。</p><p>其实砍口垒的玩法还是多少有在变化的。从 ci 配装的改革到新系统的实装，如果你享受这种硬核养成的玩法，砍口垒还是值得一试。</p><h2 id="七月：动作天尊卡普空"><a href="#七月：动作天尊卡普空" class="headerlink" title="七月：动作天尊卡普空"></a>七月：动作天尊卡普空</h2><p>七月一直是单机游戏玩的最多的月份，无他，夏促实在是太香了。这次夏促我打包购入了两部生化的重置、一部正传生化七，以及杀手 2。但是最后认真玩了的其实只有生化 2 重置。</p><p>不过呢，这次虽说买得不少，只是并没有玩得很多。生化系列游戏很好玩，解密和丧尸的氛围都挺不错的，但是实在是太晕了。我贴着晕车贴都还是觉得难受，所以没有玩下去。杀手 2 我觉得可能也是差不多的原因吧，但是其实杀手的节奏可以很快，只要刚正面就好了，可惜我刚正面总是死得很快，所以也没有好好玩下去。</p><h2 id="八月九月：命运冠位指定和只狼"><a href="#八月九月：命运冠位指定和只狼" class="headerlink" title="八月九月：命运冠位指定和只狼"></a>八月九月：命运冠位指定和只狼</h2><p>其实上半年疯狂肝游戏的时候就把 fgo 捡回来玩了。虽然我弄丢了日服的帐号，但是 bgo 还是有个好处，就是有未来视。依靠未来视，以及按照强度抽卡的原则，我到现在为止 bgo 还是零氪。但是这个游戏实在是太肝了，我可能可以同时玩 fgo 和明日方舟，或者同时玩明日方舟和砍口垒，但我肯定不能长时间同时玩 fgo 和砍口垒。这两个费肝的游戏必放弃一个（事实上现在这俩游戏我都 afk 了）</p><p>九月份头一次打了 fgo 的无限池，打了一会儿我就没耐心刷下去了。所以我弄了一下脚本，但是那个脚本需要声音识别来操作，所以每天晚上我房间里就回荡着机械音读的数字，简直精神污染。无限池不单只刷体力精神污染，抽无限池本身也是很精神污染的。刷了小 100 个金苹果之后我就放弃了。</p><p>只狼上手之后，果然如我所料，需要大量时间练习才能顺利推完主线。但是在决定跟着教程玩的这段时间我还是觉得只狼非常好玩，所以我还是去按照包爽打法推到了狮子猿，最后等老头环发布之后，羽毛的包爽六才会出，到时候我再接着通关吧。</p><h2 id="十月：明日方舟"><a href="#十月：明日方舟" class="headerlink" title="十月：明日方舟"></a>十月：明日方舟</h2><p>其实方舟并没有只是在十月开始玩，只是十月份的复刻活动是我头一次觉得方舟剧情很有意思的活动。那时候应该是讲临光家族的故事，玛嘉烈冲进竞技场那一段实在是太燃了。但是我也感受到了卡池的恶意，最后到十一月份我才井出了迷迭香。</p><p>以及那时候的生活重心应该是看声优和偶像（</p><h2 id="十一月：xgp-你做得好啊"><a href="#十一月：xgp-你做得好啊" class="headerlink" title="十一月：xgp 你做得好啊"></a>十一月：xgp 你做得好啊</h2><p>双十一的时候下单了 mac，虽然和游戏没什么关系，但是我 windows 自此慢慢向游戏机转型了。虽然十一月的时候 mac 还没到货，但是我先去定了 xgp，瞬间香到了。</p><p>首先是玩到了我游戏的启蒙作之一『帝国时代』的最新续作，这一代的文明比起以前来说确实少了很多，但是机制变化非常非常大。以前不同文明之间的差别除了特殊单位以外，就是同一棵科技树的删减而已。也就是说除了特殊单位以外，不同文明之间有的东西都是一样的。但是有些东西是有些文明有，有些文明没有，比方说南美洲文明是没有马厩的，没有掌握火药的文明不能修炮塔之类。</p><p>但是 4 代则从最基础的东西就修改了很多。比方说中国获取黄金的能力是从每个生产建筑中收税，蒙古的建筑可以打包带走，俄罗斯可以依靠打猎产出黄金等等。每个文明的运营节奏相差都会很大。而且还有很多文明独特的机制能力，每一个感觉都和历史上这些文明的特性非常契合。</p><p>然后，游戏节奏比起二代来说应该是明显变快了。二代一直有「老年 rts」的称号，但是四代的节奏现在和 War3 非常相近了。</p><p>其次在 xgp 里玩到的游戏就是「毁灭战士 永恒」。我本来的想法是随便试一试，如果很晕又没什么意思那就卸载，结果一玩就停不下来。得益于游戏节奏的快速，我基本一直是处于兴奋状态中，所以完全没有觉得会晕。这也印证了我一直以来的结论，游戏节奏足够快，内容够精彩，我就不会晕。反之，像生化 2 那样相对慢节奏的游戏，我就容易陷入晕 3d 的症状中。</p><h2 id="十二月：文明-6"><a href="#十二月：文明-6" class="headerlink" title="十二月：文明 6"></a>十二月：文明 6</h2><p>在找 mac 上有什么游戏可以玩的时候，把文明 6 又捡回来玩了一次。这次没有很细致的规划，刷图也只是随便刷了一下，又用俄罗斯达成了一次神级难度的胜利。第一次过神就是用的俄罗斯无战飞天，这次则是用俄罗斯的核动力修道院达成了一次宗教胜利。不得不说文明 6 两个资料片之后，玩法还是比较成熟的了，就是新内容做的实在太慢，本家玩法没有多少更新，反而更了一堆什么吃鸡僵尸模式，神经病啊谁要玩那种东西。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>21 年其实我游戏玩的也不少，但是如果要总结的话，其实还是手游和麻将玩得最多。不过现在明日方舟已经基本靠脚本打日常了，所以并没有占用我很多时间，麻将的话真的是每次过年回去都会玩，2022 年春节结束到现在，我已经升到四级了。</p><p>过段时间要搬家，搬家之后希望还能享受更多好玩的游戏吧，比方说在欧陆里重建罗马什么的。</p>]]></content>
    
    
    <summary type="html">让我重新看一遍自己在频道里都发了啥游戏相关</summary>
    
    
    
    <category term="阶段总结" scheme="https://blog.rekidunois.cc/categories/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="生活" scheme="https://blog.rekidunois.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="年终总结" scheme="https://blog.rekidunois.cc/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>我在 .Net 中使用一个有点扭曲的依赖注入配置方式</title>
    <link href="https://blog.rekidunois.cc/2022/01/Dependency-Injection/"/>
    <id>https://blog.rekidunois.cc/2022/01/Dependency-Injection/</id>
    <published>2022-01-25T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>其实我花了好多时间才搞明白，依赖注入到底是个啥。最开始对它的印象就是，哦，它可以不用 new。额，然后呢？为啥不要 new？</p><p>某天睡不着觉之后去 Autofac 的文档，突然才看明白，原来依赖注入的灵魂其实是抽象依赖，这样就可以在不修改代码的情况下通过更换依赖的实现而修改逻辑了。</p><p>这个做法有一点像换显卡。PCI-E 就是那个抽象的依赖，系统和主板不管你插到上面的是个 3090 还是 610，只要你符合接口的协议，插上去的显卡就能正常工作（当然还包括驱动和供电之类的）。</p><p>但是我其实没有好好用过任何一个依赖注入框架。我自己工作的 Qt/C++很少有人提到这个东西。虽然我有在做类似的事情，但是都是手动注入，不是用什么框架。</p><p>头一次用依赖注入框架是大学做毕业设计的时候，写一个管理系统后端时用了注入框架，但是当时其实是照猫画虎，复制粘贴修改代码来的。我自己并不理解为什么代码要这么写。</p><p>断断续续思考这一概念两年多了，参照了很多框架的示例代码，也看了很多开源项目的做法，终于糊（抄）出了一个自己相对满意的依赖注入使用方式，于是打算稍微记录一下，告诉多年以后的自己，当年想的东西就是这些，是不是很傻（逃</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>这个使用方式我不知道和注入框架有没有关系，但是我看到和我使用相同方式的项目从 Autofac 切换到了 DryIoc，我自己用微软自己的 DI 框架也做了。思想应该是通用的，因为我觉得更多地是在使用 C# 语言和 .net 本身的功能，而不是注入框架的功能。</p><p>这个方式想要达到的效果就是，不需要每增加一个依赖，就去 AddScoped 一次。以及不需要为每一个 Assembly 都写一遍注入。写逻辑的时候，只需要新建依赖，标注，然后写实现，需要依赖的地方只需要写出自己需要的依赖就可以用了。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>这个使用方式需要生成一个 IHost，依赖都跑在里面。理论上来说有不需要 Host 的写法，但是我今天还是先记下需要 Host 的做法。</p><p>首先是使用 C# 的 <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/">Attribute</a> 类来创建一个标记依赖的 Attribute。这个 Attribute 用来描述在添加依赖的时候，你想要如何添加这个依赖，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">ExportAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Type? ContractType &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> SingleInstance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> LazyCreate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SingleInstance</code> 和 <code>LazyCreate</code> 就是字面意思，不作解释。<code>ContractType</code> 则可以用来说明此依赖的接口是哪一个，在注入的时候就可以这么写：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Export(ContractType:typeof(IService), SingleInstance = false, LazyCreate = true)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceImplA</span>:<span class="title">IService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Iservice impl</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type = <span class="keyword">typeof</span>(ServiceImplA);</span><br><span class="line">exported = type.GetCustomAttributes();</span><br><span class="line"><span class="keyword">if</span> (exported <span class="keyword">is</span> ExportAttribute)</span><br><span class="line">&#123;</span><br><span class="line">    service.AddScoped(exported.ContractType ?? type, type);</span><br><span class="line">    <span class="comment">// service.AddScoped(IService, ServiceImplA)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象依赖的注入，上面提到过，并且不止这一种，我也还在学习中。最近发现的另一个好处就是，获取依赖的时候，可以获取同一个接口的所有不同实现的实例，在写消息处理的时候非常有用。</p><h2 id="避免重复工作"><a href="#避免重复工作" class="headerlink" title="避免重复工作"></a>避免重复工作</h2><p>上面是我们对单个依赖的处理。但是我不希望每加一个依赖，我就要写一遍 AddScoped，而且如果是手写，其实也不需要 Attribute。如何实现增加的依赖都能自动注入呢？</p><p>首先，你需要读取配置文件，文件中写明了哪些 Assembly 是你需要的依赖。当然你也可以不用配置文件，直接硬编码。</p><p>然后，写一个三层循环，外层循环遍历所有 Assembly，中层循环遍历每个 Assembly 里的每个类型，内层循环遍历每个类型中的所有自定义 Attribute，大概这个样子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> assembly <span class="keyword">in</span> Assemblies)</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> type <span class="keyword">in</span> assembly.DefinedTypes)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (type.IsAbstract)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> attribute <span class="keyword">in</span> type.GetCustomAttributes())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (attribute)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> ExportAttribute exported: <span class="comment">// 其他的 CustomAttribute 就不需要在这里处理了，过滤一下</span></span><br><span class="line">                    <span class="keyword">if</span> (exported.SingleInstance)</span><br><span class="line">                    &#123;</span><br><span class="line">                        services.AddSingleton(exported.ContractType ?? type, type);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        services.AddScoped(exported.ContractType ?? type, type);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个 switch 里还可以做更多的限定，因为注入的方式不止这两种，当然，道理是一样的。这么写了之后，所有带有 ExportAttribute 的类型，都可以被注入了。增加 Assembly 或者 Type 都不需要重复已经做过的工作，只需要标注好你想要如何被注入即可。</p><p>把上面的代码整理一下，丢到一个 Bootstrap namespace 下，在启动的时候先跑这里的代码，整个注入的工作就完成了。</p><h2 id="依赖的使用（快来注入我！）"><a href="#依赖的使用（快来注入我！）" class="headerlink" title="依赖的使用（快来注入我！）"></a>依赖的使用（快来注入我！）</h2><p>大多数的注入框架都有直接请求需要的依赖的方法。但是其实用得最多的还是通过构造方法来注入。这一点没什么好说的，写构造就行。对 MsDI 来说，所有可以 GetRequiredService 的依赖，应该是都可以在构造方法中进行注入的。</p><p>比如说前面提到的，获取某个接口的所有实现，可以通过 IServerProvider 的 GetServices 方法返回一个 IEnumerable，也可以通过在构造方法中定义一个 IEnumerable 的参数，让注入框架注入所有这个接口的实现，像这样：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span>(<span class="params">IEnumerable&lt;IService&gt; services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> service <span class="keyword">in</span> services)</span><br><span class="line">    &#123;</span><br><span class="line">        service.DoSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前我对于依赖注入的理解和使用就这些，因为太蠢了所以其实花了好长的时间才搞懂怎么使用。其实这样是比较扭曲的，我在 Bootstrap 里还是写了几个 new，来读取配置文件之类的东西。对于第三方依赖，其实也应该有类似的方式来注入，比方说用一个空的接口继承第三方的接口之类的。但是我现在还是直接在 Bootstrap 里写第三方依赖的接口注入。</p><p>我参考的项目最多的是 <a href="https://github.com/amatukaze/ing">ING</a>，一个砍口垒的浏览器。在学习 .net 方面这个项目可以算是我的启蒙项目了，非常感谢项目的作者羽毛和蜜瓜～（所以 2.0 什么时候出）</p>]]></content>
    
    
    <summary type="html">不要 new，要依赖注入</summary>
    
    
    
    <category term="使用方法" scheme="https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
    <category term="Web 端开发" scheme="https://blog.rekidunois.cc/categories/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/Web-%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="backend" scheme="https://blog.rekidunois.cc/tags/backend/"/>
    
    <category term=".net" scheme="https://blog.rekidunois.cc/tags/net/"/>
    
    <category term="Dependency-Injection" scheme="https://blog.rekidunois.cc/tags/Dependency-Injection/"/>
    
  </entry>
  
  <entry>
    <title>小谈外卖配送员维权案例</title>
    <link href="https://blog.rekidunois.cc/2022/01/Takeaway-Deliverers/"/>
    <id>https://blog.rekidunois.cc/2022/01/Takeaway-Deliverers/</id>
    <published>2022-01-25T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<p>外卖骑手的劳动纠纷问题和生存问题已经不是头一次见诸报端了。从前年「人物」杂志那篇『<a href="https://epaper.gmw.cn/wzb/html/2020-09/12/nw.D110000wzb_20200912_1-01.htm">外卖骑手，困在系统里</a>』开始，社会开始聚焦中介平台和劳动者之间的法律纠纷。我第一次去了解了这些最熟悉的陌生人，看看他们的生活，再对比一下自己的生活，即使只透过这些媒体文章的描述，我也可以了解到他们在生活中被绝望包裹的无力感。</p><p>我扪心自问能否和文章里描述的那样去工作，我的答案是我做不到。这样的工作我可能一分钟也不愿意多干，只是我可以选择不干，但对于现在正在做这份工作的人来说，他们可能没有其他更好的选择。</p><p>今天读到了法律组织「致诚劳动者」在一席上的 <a href="https://mp.weixin.qq.com/s/KNLWPjHf6YzTMUNWUkZrUg">演讲记录</a>。从法律工作者的角度，致诚的研究员们为我们展现了中介平台在法律框架内搭建的一个错综复杂的网络，一个最大限度避免承担雇佣劳动者时所需要承担义务的网络。</p><p>当我读这篇文章的时候，我其实是既难过，又感动的。难过是想起那段广为流传的话（虽然我找不到这句话的出处，但是我觉得这段话依旧很有道理）：</p><blockquote><p>我不想哪一天，在中国的大地上再出现人剥削人的现象，再出现资本家、企业主、雇工、妓女和吸食鸦片烟；如果那样，许多烈士的血就白流了……</p></blockquote><p>感动是，在这片大地上依旧有为劳动者发声的人，就像鲁迅 <a href="http://www.luxunmuseum.com.cn/cx/content.php?id=1955&bt=中国人失掉自信力了吗">所言</a>，「为民请命的人」</p><blockquote><p>我们从古以来，就有埋头苦干的人，有拚命硬干的人，有为民请命的人，有舍身求法的人，…… 虽是等于为帝王将相作家谱的所谓 “正史”，也往往掩不住他们的光耀，这就是中国的脊梁。<br>这一类的人们，就是现在也何尝少呢？他们有确信，不自欺；他们在前仆后继的战斗，不过一面总在被摧残，被抹杀，消灭于黑暗中，不能为大家所知道罢了。说中国人失掉了自信力，用以指一部分人则可，倘若加于全体，那简直是诬蔑。<br>要论中国人，必须不被搽在表面的自欺欺人的脂粉所诓骗，却看看他的筋骨和脊梁。自信力的有无，状元宰相的文章是不足为据的，要自己去看地底下。</p></blockquote><h2 id="小摘抄"><a href="#小摘抄" class="headerlink" title="小摘抄"></a>小摘抄</h2><p>在致诚的演讲中，提到了这样一件事：</p><blockquote><p>第二个问题是，企业背后都有非常强大的律师团，但是如果骑手的权益受损，又有谁来替他们维权呢？所以我们主任有一次在全国总工会的一个活动上，就公开呼吁「律师不要为企业出馊主意」。</p></blockquote><p>我认为这是一个非常值得拿出来说的问题。很多人提到这个事情就会说，为企业工作的律师也是打工人，也要看雇主的脸色说话，也要保住自己的饭碗。但是其实，你为了饭碗不得不出这种「馊主意」，本质上就是劳动法保护缺失的体现。</p><p>当你在为这些骑手发声的时候，当你希望劳动法能够得到落实的时候，实际上你就是在帮自己。让自己能够既不用出这种馊主意，也保住这份工作。</p><p>这和前段时间看到的，HR 想办法减少公司损失，辞退了员工之后，自己也被辞退了是异曲同工的。我们一直认为，HR 就是代表公司意志，对员工实行生杀予夺大权的职位，但是也同时应该意识到，HR 本人的生杀大权，也同样是这样被握在公司手里。</p><p>我们没有什么本质不同，只有落实到位的劳动法才能保护你我的权益不受侵害。</p><p>我们联合。</p>]]></content>
    
    
    <summary type="html">我们联合！</summary>
    
    
    
    <category term="随笔" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>在 M1 Mac 上使用 VMWare Fusion 安装 Windows 虚拟机</title>
    <link href="https://blog.rekidunois.cc/2022/01/vmware-fusion-m1/"/>
    <id>https://blog.rekidunois.cc/2022/01/vmware-fusion-m1/</id>
    <published>2022-01-19T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于正在使用的方舟脚本有一个依赖还没有移植到 m1 平台上，所以我打算装一个 Windows 虚拟机来跑。</p><p>Mac 上的 Windows 虚拟机其实不少，如果不差钱其实可以直接 Parallels Desktop，少点折腾也是好事。VMWare Fusion 的优势是免费，但是 m1 版本尚在测试中，如果有正经的生产需求，我建议还是三思。</p><p>关于安装 VMWare Fusion 并且在其中安装 Windows11 arm 的方法，少数派的 <a href="https://sspai.com/post/69659">这篇文章</a> 介绍得很详细了。其中提到两种获取 windows11 arm 的方式，推荐使用第二种，即从 Hyper-V 格式的虚拟硬盘转换后，直接挂载虚拟硬盘，比从 UUP 文件打包镜像要方便很多。</p><h2 id="Windows-上的折腾"><a href="#Windows-上的折腾" class="headerlink" title="Windows 上的折腾"></a>Windows 上的折腾</h2><p>要跑 python 脚本，第一步肯定是要安装 python。 Windows11 的商店其实就能直接安装 python 依赖，但是如果你和我一样从 Hyper-V 格式的虚拟硬盘转换之后，启动虚拟机，你会发现一开始没有商店应用。</p><p>不过当然是可以装的。建议先直接安装 Powershell 或者你熟悉的命令行，会让接下来的配置体验好不少。</p><p>但是我试了不少方法，最后还是直接运行了 <code>wsreset.exe -i</code> , 重启虚拟机之后，商店就出现了。</p><p>出现了之后，就可以在里面直接搜索 <code>python</code> 然后安装了。之后就是 <code>pip3 install</code> 想要的东西，然后就可以愉快地跑方舟脚本了。</p><h2 id="还不够"><a href="#还不够" class="headerlink" title="还不够"></a>还不够</h2><p>Windows 虚拟机的分辨率非常低，当然 VMWare 有许多教程教你如何让虚拟机可以跑在高分辨率下，但是我其实不怎么需要 Windows 的图形界面。毕竟我只需要跑脚本，理论上只需要一个命令行界面就够了。所以我决定折腾一下 Windows 的 ssh，并且尝试后台启动虚拟机。</p><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>折腾的过程意外的顺利，Windows11 的 OpenSSH 默认就是开启的，直接在 Mac 上使用 <code>ssh user@host</code> 连接就可以了。其中 ip 地址可以在 Windows 的设置页面中查看。但是这时候脸上去默认进入的是 cmd 环境，体验很差。所以我们需要在注册表编辑器中修改 ssh 的默认命令行环境。</p><p>在注册表编辑器中，找到 <code>HKEY_LOCAL_MACHINE\SOFTWARE\OpenSSH</code> 目录，在其中新建 string 项 <code>DefaultShell</code>，然后里面填入你喜欢的终端所在路径，比方说我用 PowerShell，就可以输入 <code>C:\Program Files\PowerShell\7\pwsh.exe</code>，这样使用 ssh 连接上之后，就会进入 PowerShell 环境中，获得一些基本的历史和补全能力。如果有兴趣，进一步折腾 PowerShell 的配置文件也可以，所有的修改都可以在 ssh 连接上之后得到，非常方便。</p><h3 id="后台启动虚拟机"><a href="#后台启动虚拟机" class="headerlink" title="后台启动虚拟机"></a>后台启动虚拟机</h3><p>VMWare 本身就提供这一能力，但是需要使用命令行来启动。在 <code>VMWare Fusion</code> 的 app 包目录下，找到目录 <code>Contents/Library</code>，里面的 vmrun 可执行文件就可以用来启动虚拟机。我们可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmrun -T fusion start /Path/To/Your/vm/vmx/file nogui</span><br></pre></td></tr></table></figure><p>如果你按照前面少数派文章中的指引创建了虚拟机文件，那你应该知道那个 vmx 在哪里找，就在 vmwarevm 文件夹下。<code>nogui</code> 可以让虚拟机在后台启动。</p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>我不想每天一条条敲命令。于是我写了个脚本，并且给 iTerm 创建了一个 profile，当我启动 profile 时，运行这个脚本，自动在后台启动虚拟机并且 ssh 连接上去。</p><p>脚本的内容就是上面所写的启动虚拟机并 ssh，没什么好说的。在 iTerm 的 Preferences-&gt;profile 页面，创建一个新的 profile，将启动选项选择为 Command，然后输入 <code>sh /path/to/script.sh</code>，这样当你新建这个 profile 的窗口时，就会自动运行这个脚本了。</p><p>本来我以为需要额外的配置来关闭虚拟机，没想到如果我创建了这个窗口后，直接在 ssh 中输入 exit 或者关闭 iTerm 的窗口，虚拟机就会自动退出。这样省去了很多繁琐的操作，使用起来更加方便了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实这个还是很有必要的。以后出门应该只会带 MacBook 了。现在没有 Windows 机器的情况下，我也能让方舟脚本帮我刷体力，不至于要自己用手刷，然后由于懒惰而放弃了。</p><p>本来以为今年是可以就地过年，没想到深圳卫健委操作还是挺不错的。基本上中高风险地区只控制在了别的几个区里，而且老家没有搞一刀切，从低风险但是有病例的省内市回去只需要居家隔离三天就可以了。</p><p>明明是两件令人快乐的事情重合在一起，为什么会变成这样呢（指过年不能宅在出租屋白金死亡搁浅）</p>]]></content>
    
    
    <summary type="html">为了打游戏煞费苦心</summary>
    
    
    
    <category term="折腾日记" scheme="https://blog.rekidunois.cc/categories/%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0/"/>
    
    <category term="MacOS" scheme="https://blog.rekidunois.cc/categories/%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0/MacOS/"/>
    
    
    <category term="MacOS" scheme="https://blog.rekidunois.cc/tags/MacOS/"/>
    
    <category term="VMWare" scheme="https://blog.rekidunois.cc/tags/VMWare/"/>
    
    <category term="Windows11 arm" scheme="https://blog.rekidunois.cc/tags/Windows11-arm/"/>
    
    <category term="虚拟机" scheme="https://blog.rekidunois.cc/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    <category term="命令行" scheme="https://blog.rekidunois.cc/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    <category term="脚本" scheme="https://blog.rekidunois.cc/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>对中国探月工程进行的一个简单回顾</title>
    <link href="https://blog.rekidunois.cc/2022/01/China-Lunar-Exploration-Project/"/>
    <id>https://blog.rekidunois.cc/2022/01/China-Lunar-Exploration-Project/</id>
    <published>2022-01-09T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从小等到大的韦伯望远镜终于发射升空，并且这几天就要在日地拉格朗日L2进行展开了。这让我回想起同样前往了L2进行探测活动的中国航天器——嫦娥五号。</p><p>当时我就觉得，这些人好厉害，在进行了如此复杂的月球探测活动之后，居然还有余力进行其他的考察。但我查询了一下维基，发现中国探月工程的航天器，基本都在预期寿命到了之后，还在继续工作。所以就想稍微写一点总结，看看我们在月球探测上做到了些什么，这些探测器现在都在干什么。</p><h2 id="嫦娥五号"><a href="#嫦娥五号" class="headerlink" title="嫦娥五号"></a>嫦娥五号</h2><p>前面提到的<a href="https://zh.wikipedia.org/wiki/嫦娥五号">嫦娥五号</a>，是中国探月工程三步走第一步中，「绕，落，回」的第三小步，即采样后携带月壤标本返回地球。由于在执行完月球探测任务之后，嫦娥五号还有足够飞到拉格朗日点的燃料，于是她进行了拓展任务，对轨道飞行器在L1点的环绕和控制技术进行验证。</p><p>2021年3月15日13时29分，嫦娥五号成功抵达L1，成为中国国家航天局首个抵达L1点的航天器。</p><h2 id="嫦娥二号"><a href="#嫦娥二号" class="headerlink" title="嫦娥二号"></a>嫦娥二号</h2><p>而嫦娥五号的前辈，<a href="https://zh.wikipedia.org/wiki/嫦娥二号">嫦娥二号</a>，也是在完成了月球探测任务之后，造访了拉格朗日点L2，还成为了世界上首个从月球直接前往日地拉格朗日点的飞行器。</p><p>在完成了L2点的探测之后，嫦娥二号还对小行星4179号进行了探测。在完成了对小行星的探测之后，嫦娥二号向着更为遥远的深空飞行。现在，她变成了一颗围绕太阳飞行的太阳系人造卫星。预计在2029年回到地球附近。</p><h2 id="嫦娥系列的其他探测器"><a href="#嫦娥系列的其他探测器" class="headerlink" title="嫦娥系列的其他探测器"></a>嫦娥系列的其他探测器</h2><p>嫦娥系列的月球探测器中，除了上文提到的二号和五号，<a href="https://zh.wikipedia.org/wiki/中国探月工程">其他探测器</a>都留在了月球。</p><p>一号在月球执行了硬着陆任务，结束了她的使命。</p><p>三号则携带中国第一辆月球车，在2016年巡视器停止运作，但着陆器仍然正常工作。</p><p>四号执行了世界首次月球南极高纬度的月球背面着陆任务，其上携带着中国第二辆月球巡视器「玉兔二号」，截至目前仍旧正常工作。</p><p>顺便一提，为了给月球背面的探测器提供信号中继，中国国家航天局还发射了一颗中继卫星「鹊桥」号，她现在仍旧运行在地月拉格朗日L2点。</p><h2 id="展望一下未来"><a href="#展望一下未来" class="headerlink" title="展望一下未来"></a>展望一下未来</h2><p>在 2022 年，中国的航天工程重点将放在近地轨道的空间站建设上。现在已经有宇航员在空间站中常驻，不出意外的话他们将会是第一批在太空过中国年的中国人。从四月份开始，将会不断有发送到天宫空间站的部件。</p><p>而从2023年开始，中国的探月工程将继续进行。三期工程中第三期的最后一颗探测器嫦娥六号预计将在23-24年发射。而在这之后，无人探月部分还会发射「嫦娥七号」和「嫦娥八号」两颗探测器，这两颗探测器将会对在月球建立前哨站进行探索，为载人登月和在月面建立永久基地任务提供支持。</p>]]></content>
    
    
    <summary type="html">韦伯发射升空了，好开心呀</summary>
    
    
    
    <category term="随笔" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="资料总结" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/%E8%B5%84%E6%96%99%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="维基总结" scheme="https://blog.rekidunois.cc/tags/%E7%BB%B4%E5%9F%BA%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>小谈娱乐作品中的刻板印象</title>
    <link href="https://blog.rekidunois.cc/2022/01/Stereotype/"/>
    <id>https://blog.rekidunois.cc/2022/01/Stereotype/</id>
    <published>2022-01-03T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>BBC 的一篇 <a href="https://www.bbc.com/zhongwen/simp/world-59857099">新闻</a> 提到，乌克兰文化部长向网飞抱怨说，剧集《艾蜜莉在巴黎》中的乌克兰人形象的描绘过于刻板印象，而且是负面的。</p><p>本剧不单止在刻画乌克兰人形象上有争议。作为一部描绘美国人到巴黎工作经历的剧集，法国人也抱怨过该剧集在描绘巴黎市民时过于刻板印象，将他们描绘成「没有礼貌，成天戴着贝雷帽，并经常在男女关系中不忠」。</p><h2 id="刻板印象在娱乐作品中的使用"><a href="#刻板印象在娱乐作品中的使用" class="headerlink" title="刻板印象在娱乐作品中的使用"></a>刻板印象在娱乐作品中的使用</h2><p>使用刻板印象的作品是肯定会遭受到抱怨的。</p><p>但是从推动剧情的角度来说，很难完全避免去使用刻板印象。</p><p>比方说一个角色的标签是程序员，那这个人肯定是运维 + 前端 + 后端 + 数据分析 + 算法 + 网络安全啥都会的超级大佬。</p><p>然而现实中不是所有程序员都是这样的，他们可能只熟悉上述技能中的一种而已。</p><p>当你给一个角色贴了程序员这个标签，那么他一定是在技术上什么都会的形象，并且以此来推动剧情的发展，这就是程序员的刻板印象之一。</p><p>这还算是比较中性的刻板印象。我们虽然知道成为这样的人很难，但是肯定希望自己有朝一日能成长为这样的人。其他在大众眼中负面的刻板印象则更容易引发不满，比方说程序员一定是胖子，家里昏暗杂乱，墙上贴着美少女海报，带着眼镜，头发蓬松。</p><p>以前也许能说程序员脾气好或者说话声音小，没有人抱怨。但是这样的形象如果继续在作品中出现，有朝一日肯定会被有一定影响力的 KOL 指摘。毕竟千人千面，娱乐作品如果总是以刻板形象的方式来描绘不同的人，终究是会被时代所抛弃的。</p>]]></content>
    
    
    <summary type="html">让你看到死宅了真是抱歉，我这就走</summary>
    
    
    
    <category term="随笔" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="胡言乱语" scheme="https://blog.rekidunois.cc/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
    <category term="网络" scheme="https://blog.rekidunois.cc/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="新闻" scheme="https://blog.rekidunois.cc/tags/%E6%96%B0%E9%97%BB/"/>
    
  </entry>
  
  <entry>
    <title>年轻人的第一次 Openwrt 刷机体验 Feat. redmi.AX6</title>
    <link href="https://blog.rekidunois.cc/2022/01/openwrt-ax6/"/>
    <id>https://blog.rekidunois.cc/2022/01/openwrt-ax6/</id>
    <published>2022-01-03T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AX6 买来的那时候，就已经说可以刷 openwrt 了。但是当时的固件似乎没有 160MHz 可用，而且我官固用着也还算可以，所以就没动。</p><p>搬家之后，还是觉得刷一刷比较好，毕竟功能更多，而且小米固件，还是多少有点不舒服。</p><p>正好最近连休，就开始折腾这些东西了。顺带一提，在刷 ax6 之前，我还顺手给 K30U 刷了 PE，能完美工作的指纹真是太爽了。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>我对交叉编译或者 openwrt 编译本身可谓是一窍不通。连 makefile 对我来说都是天书一样的东西。幸好，github 上可以使用 action 来编译 openwrt，你要做的只是搞清楚配置文件里的配置项是啥意思，然后作删改就好了。</p><p>搜了一下，有人专门为了红米系列的路由器的 openwrt 编译做了 action <a href="https://github.com/jingleijack/AX6-AX3600_Almighty-Edition_Config">仓库</a>，热门型号都在里面了，fork 这个仓库，修改对应型号的 config 文件，然后进入仓库的 Action 页面，选中你想要编译的型号点击 <code>Run workflow</code>，然后，坐和放宽。</p><p>保守估计编译需要 2 小时 30 分左右，编译完成之后，action 会帮你生成一个 release，里面的东西基本上就是你刷入所需要的东西了。</p><h2 id="刷入"><a href="#刷入" class="headerlink" title="刷入"></a>刷入</h2><p>有了固件，刷入就很方便了。恩山论坛里有非常详细的教程，从官固刷到 openwrt，或者从 openwrt 刷到，well，另一个 openwrt，甚至从 openwrt 刷回官固，都有。我这里稍微记录一下我用过的命令，以防自己以后需要再干这种事情。建议各位把所需要的文件存到一个文件夹里，放到网盘里备份起来。除了路由器，刷手机的时候也可以根据型号来建立备份文件夹，未来的你一定会感激现在的自己。</p><h3 id="1-0-如果是官固"><a href="#1-0-如果是官固" class="headerlink" title="1.0 如果是官固"></a>1.0 如果是官固</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nvram set flag_last_success=0</span><br><span class="line">nvram set flag_boot_rootfs=0</span><br><span class="line">nvram set flag_boot_success=1</span><br><span class="line">nvram set flag_try_sys1_failed=0</span><br><span class="line">nvram set flag_try_sys2_failed=0</span><br><span class="line">nvram set boot_wait=on</span><br><span class="line">nvram set uart_en=1</span><br><span class="line">nvram set telnet_en=1</span><br><span class="line">nvram set ssh_en=1</span><br><span class="line">nvram commit</span><br></pre></td></tr></table></figure><h3 id="1-01-如果是已经在-openwrt-状态下"><a href="#1-01-如果是已经在-openwrt-状态下" class="headerlink" title="1.01 如果是已经在 openwrt 状态下"></a>1.01 如果是已经在 openwrt 状态下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fw_setenv flag_last_success 0</span><br><span class="line">fw_setenv flag_boot_rootfs 0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p><a href="#13-qsdk-固件刷入-mtd13">跳转到本文 1.3 节</a></p><h3 id="1-1-QSDK-过度固件"><a href="#1-1-QSDK-过度固件" class="headerlink" title="1.1 QSDK 过度固件"></a>1.1 QSDK 过度固件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mtd write /tmp/xiaomimtd12.bin rootfs</span><br></pre></td></tr></table></figure><p>拔电重启，此时路由地址会变为 192.168.1.1，用户名 root，无密码。若光猫的地址也是这个，建议拔掉 wan 口，过会儿再插回来。</p><h3 id="1-2-扩容分区（如果对自己使用的东西大小有明确认知，认为不用那么大，也可以选择不扩）"><a href="#1-2-扩容分区（如果对自己使用的东西大小有明确认知，认为不用那么大，也可以选择不扩）" class="headerlink" title="1.2 扩容分区（如果对自己使用的东西大小有明确认知，认为不用那么大，也可以选择不扩）"></a>1.2 扩容分区（如果对自己使用的东西大小有明确认知，认为不用那么大，也可以选择不扩）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. /lib/upgrade/platform.sh</span><br><span class="line">switch_layout boot; do_flash_failsafe_partition a6minbib &quot;0:MIBIB&quot;</span><br></pre></td></tr></table></figure><p>拔电重启</p><h3 id="1-3-QSDK-固件刷入-mtd13"><a href="#1-3-QSDK-固件刷入-mtd13" class="headerlink" title="1.3 QSDK 固件刷入 mtd13"></a>1.3 QSDK 固件刷入 mtd13</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ubiformat /dev/mtd13 -y -f /tmp/openwrt-ipq-ipq807x_64-xiaomi_ax6-squashfs-nand-factory.bin</span><br><span class="line">fw_setenv flag_last_success 1</span><br><span class="line">fw_setenv flag_boot_rootfs 1</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>其实我似乎没有做这一步。因为上面提到的编译产物并没有这个东西。我相信我现在是跑在 mtd13 分区，不知道有没有什么问题。..</p><h3 id="1-4-openwrt-固件刷入-mtd12"><a href="#1-4-openwrt-固件刷入-mtd12" class="headerlink" title="1.4 openwrt 固件刷入 mtd12"></a>1.4 openwrt 固件刷入 mtd12</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ubiformat /dev/mtd12 -y -f /tmp/openwrt-5.10.63-redmi_ax6-squashfs-nand-factory.ubi</span><br><span class="line">fw_setenv flag_last_success 0</span><br><span class="line">fw_setenv flag_boot_rootfs 0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>如果想要查看 fw_setenv 所设置的所有变量，可以使用 fw_printenv。</p><p>此时，路由器地址会变成 openwrt 代码中所设置的默认地址，应该也能在编译的时候修改？不是很清楚，但是可以在你使用的代码仓库里查看默认地址和密码。</p><p>然后，刷机就宣告结束了。</p><h3 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h3><p>OpenWrt 和 QSDK 互相切换命令</p><p>OpenWrt 切换 QSDK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fw_setenv flag_last_success 1</span><br><span class="line">fw_setenv flag_boot_rootfs 1</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>QSDK 切换 OpenWrt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fw_setenv flag_last_success 0</span><br><span class="line">fw_setenv flag_boot_rootfs 0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>本节参考文章 <a href="https://www.right.com.cn/FORUM/thread-6054985-1-1.html">红米 AX6 刷 openwrt 和 QSDK 双系统 （扩容）</a>，<a href="https://qust.me/post/redmi_ax6_openwrt/">红米 AX6 刷 openwrt 教程｜软路由杀手来了</a>，以及来自 <a href="https://blog.rachelt.one">Rachel</a> 的大量帮助！（瑞秋秋编译 openwrt 本当上手，还做了文件存档，太感谢了）</p><h2 id="然后就能正常使用了吗？"><a href="#然后就能正常使用了吗？" class="headerlink" title="然后就能正常使用了吗？"></a>然后就能正常使用了吗？</h2><p>Well，yes and no.</p><p>第一次刷入算是基本正常，该工作的都工作，但是有点小问题：</p><ul><li><p>无线速度使用 iperf3 测试，只有 400+，对于 wifi6 来说无论如何都太慢了。但是后来发现，是因为 mpb 走了有线导致测速变慢了（迫真）</p></li><li><p>OpenClash 经常无故崩溃，然后网就断了。</p></li><li><p>Adguard 无法更新，当然也无法进入配置页面</p></li></ul><p>由于这些小问题，我打算重新编译 openwrt。一开始想要使用 lean 的源码，但是他有一个 commit 将所有米系设备都移出了支持列表。当我尝试在 Action 里去掉这个 commit 的时候，rebase 又出现了冲突。</p><p>于是我尝试 fork lean 的代码，然后在本地处理这些冲突，再 push 回去。这么操作确实成功了，但是 Action 却在编译的时候失败了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: target/linux failed to build.</span><br></pre></td></tr></table></figure><p>没有搞清楚发生什么事了，我把目光转向了 5.15 版本的固件。跑了这个版本的 Action，发现一切工作也正常，甚至感觉比 5.10 版本还要顺滑。</p><p>然而在使用的过程中，依旧遇到了一些奇怪的问题。在五次编译之后，openwrt 总算是稳定使用了。而中间遇到的问题，最终发现都是我自己的问题：</p><ul><li><p>头一次刷进去，因为地址变成了 192.168.1.1，和光猫的地址一样，所以进了光猫的后台，一脸懵逼，拔掉线之后继续 config（然后设置 pppoe 的时候忘记插上去，又差点重新刷一次）</p></li><li><p>编译好了一版，对着 lan 口设置了半天 pppoe，折腾了差不多半个小时才反应过来，应该是在 wan 口设置。</p></li><li><p>上面提到的 openclash 的问题，是因为 openwrt 22.0 使用 nftables，而 openclash 和 shellclash 都需要用到 iptables，所以就算成功启动了，也无法走代理。</p></li><li><p>遇到了 argon 主题在 22.0 上不知为何无法显示侧边栏的问题，但是改成 5.15 内核版本之后就没这个问题了。argon 需要安装 luci-compat 和 luci-lib-ipkg 两个包，否则它的配置界面无法启动。</p></li><li><p>一开始以为空间不够用，打算找方法扩容，但是我手头没有空闲的 u 盘。后来发现，不是因为空间不够，是因为我传了张 10m 的图片打算当作登录界面。</p></li></ul><p>（实在是被自己蠢到了</p><p>解决了这些问题，我的 openwrt 也算是基本正常运行了。再配置一下 Adguard 和访客网络，就可以基本不用动了。</p>]]></content>
    
    
    <summary type="html">博主犯蠢大赏</summary>
    
    
    
    <category term="折腾日记" scheme="https://blog.rekidunois.cc/categories/%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0/"/>
    
    <category term="openwrt" scheme="https://blog.rekidunois.cc/categories/%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0/openwrt/"/>
    
    
    <category term="openwrt" scheme="https://blog.rekidunois.cc/tags/openwrt/"/>
    
    <category term="路由器" scheme="https://blog.rekidunois.cc/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="clash" scheme="https://blog.rekidunois.cc/tags/clash/"/>
    
  </entry>
  
  <entry>
    <title>什么，狗蛋做了纯素的日式拉面？</title>
    <link href="https://blog.rekidunois.cc/2021/11/Gordon-Ramsay-making-ramen/"/>
    <id>https://blog.rekidunois.cc/2021/11/Gordon-Ramsay-making-ramen/</id>
    <published>2021-11-06T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>知名脱口秀艺人兼亚洲料理警察 Uncle Roger 最近发了新的<a href="https://www.youtube.com/watch?v=MJ9UGzlqxyk">视频</a>，评测了知名米其林三星大厨 Gordon Ramsay 的「10 分钟做出日式拉面」<a href="https://www.youtube.com/watch?v=-dWpHngp_ug">视频</a>。本来以为在炒饭视频中发挥优秀，拿到了 Uncle Gordon 称号的狗蛋能再一次展现他对不同国家料理的出色理解，没想到这一次的评测简直梦回 BBC 蛋炒饭和 Jame Oliver 辣椒果酱炒饭。狗蛋痛失 Uncle 头衔。</p><h2 id="这就是个搞笑视频，不要那么认真"><a href="#这就是个搞笑视频，不要那么认真" class="headerlink" title="这就是个搞笑视频，不要那么认真"></a>这就是个搞笑视频，不要那么认真</h2><p>这一次我出奇地发现，油管观众和 B 站观众的评论出奇地一致，甚至还讲了一样的笑话，比方说「狗蛋之所以这么做是因为他觉得素食主义者只能吃这种垃圾」。甚至原视频下也全都是 Uncle Roger 观众。</p><p>倒不是觉得这行为有什么值得吹嘘的，但是上一回之所以 Uncle Roger 会给狗蛋 Uncle 的头衔，并不完全是因为他搞对了所有炒饭的步骤，更重要的是因为作为一个亚裔，Uncle Roger 在狗蛋炒饭的视频中看到了一个西方人对自己文化的尊重。</p><p>不管是这一次狗蛋做的面，还是 Jame Oliver 的拉面，其实都可以算是一份好的料理。狗蛋这次做面的方式基本和我刚开始学做面的时候差不多——把面和其他食材都丢进锅里煮。但问题还是你们把这样的做法称之为拉面，这是完全不能接受的。</p><p>一道菜之所以叫这个名字，总归是有它的一些规则在里面。你可以改良，但是不能把它改到面目全非。而在做一种料理时遵循它最基本的一些规则，比方说日式拉面的面种类，味噌的正确用法，就是前面所说的对这道菜背后所代表的文化的尊重。</p><p>我不觉得狗蛋是一个不会尊重他人或者不会尊重一个族群文化的人，我更加倾向于是这次 10 分钟必须完成一道菜给他带来的限制。不像我们去拉面店点拉面，自己做一碗真正的日式拉面其实是非常耗时的事情，拉面店里能 10 分钟不到就给你端上桌完全是因为大部分费时的材料都是提前准备好一天的量，卖完就收工的。要在 10 分钟做出正宗的日式拉面，也确实是强人所难了。</p><p>或者如一些评论所言，这个系列的宗旨之一就是嘲讽那些想要在很短时间内做好各种各样料理的人，那么拉面这种看上去做得很快，实际上很费时的料理自然不会被放过。只是这个节目他还卖食谱，如果这个假设还成立，狗蛋这是既嘲讽了不懂料理的人，又赚了他们的钱？</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>先不说我附近都没有什么很正宗的日式拉面店，最近在看了一位博主的<a href="https://roriri.one/2021/03/27/modern-food/">料理包评测</a>之后，我发现外卖用的料理包其实很便宜，十五块左右就能吃一顿两个菜的一餐。而同样的东西如果是点外卖的话，可能要贵上六到十块钱不等。外卖的唯一优势就是可能里面有新鲜的青菜，而自己做料理包没有而已（虽然我也可以一包料理包再自己炒个青菜）。本着消费降级的精神，开始买了电饭煲，并且屯了一堆料理包当正餐吃。</p><p>也不是觉得有什么好的，这应该只是平衡了伙食花销和时间的一种吃饭方式而已了。希望以后我能有更多的空闲时间自己做饭吧。</p>]]></content>
    
    
    <summary type="html">其实我根本不看他视频（光速逃</summary>
    
    
    
    <category term="随笔" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="胡言乱语" scheme="https://blog.rekidunois.cc/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
    <category term="网络" scheme="https://blog.rekidunois.cc/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="社交媒体" scheme="https://blog.rekidunois.cc/tags/%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>为啥我喜欢看经常出错的内容创作者</title>
    <link href="https://blog.rekidunois.cc/2021/08/why-I-like-those-unperfect-content-creators/"/>
    <id>https://blog.rekidunois.cc/2021/08/why-I-like-those-unperfect-content-creators/</id>
    <published>2021-08-15T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xxx-up-主又被骂啦"><a href="#xxx-up-主又被骂啦" class="headerlink" title="xxx up 主又被骂啦"></a>xxx up 主又被骂啦</h2><p>曾几何时我突然发现，无论我喜欢看什么样的内容输出者，到最后我总会遇到这个人被千夫所指的情况。而在游戏区主播这里，这个情况尤甚。s1 论坛上风评好的游戏主播几乎就没有，几乎每个有点名气的人都被黑了个遍。但我即使认同他们的批评，却仍旧觉得他们所批评的主播的作品有可取之处。</p><p>暂且不论为啥 s1 论坛上对主播普遍怨气很大，在排除掉一些鸡毛蒜皮的小事之后，我发现对内容创作者的批评——不单只是游戏区主播——其实可以学到很多东西。当然前提是批评基于事实错误，而不是对某些事物的评判标准。</p><p>这让我想到了简介里提到的那个观点：在互联网上得到一个问题答案的最佳方式就是让懂的人来骂你。举个例子来说，如果你想知道 500 块钱以下有什么音质好的耳机，与其发帖问「求推荐一款 500 块钱以下的耳机」，不如发帖宣称「500 块钱以下根本就没有能听的耳机」或者「我不知道你们为什么要花几百块买耳机，手机送的音质不吊打这些智商税？」，后者的情况下，估计几分钟之内骂你不懂耳机，叫你去听听 xxx 款耳机的回复就能淹没你。而这个时候你就能知道，500 块以下哪些耳机口碑比较好了。</p><p>最近遇到的例子是 stn 快报的最新 <a href="https://www.bilibili.com/video/BV1EM4y1L7jW">一期</a>。前面提到，游戏区几乎没有在 s1 风评好的，stn 快报也是其中之一。</p><p>本期视频中 stn 为了说明游戏王的规则复杂，并且简中翻译有问题，举了如下例子：</p><blockquote><p>①将一张手卡丢弃，选择场上一张卡破坏。<br>②将一张手卡【送入墓地】发动。以一张卡为【对象】，那张卡破坏。<br>③破坏场上的一张卡【才可以发动】，将一张手卡送入墓地。</p></blockquote><p>表面上看，这三个效果基本差不多，都是丢一张卡，炸一张卡。但是熟悉游戏王规则的人就会明白，这三个效果大不相同。我并不熟悉游戏王规则，于是我去翻了一下评论区，有观众给出了如下解释：</p><blockquote><p>【关于游戏王那段的判定】<br>①将一张手卡丢弃，当场上有【大宇宙】或是在本回合内发动【次元吸引者】的情况下依旧能照常发动。选择场上一张卡破坏。<br>②将一张手卡【送入墓地】发动。由于【大宇宙】【次元吸引者】的效果是将所有要【送去墓地的卡不送去墓地而除外】，导致【送入墓地】这个前提无法触发，因此在【大宇宙】【次元吸引者】的效果适用中的情况下，该效果无法发动。同时，以一张卡为【对象】，那张卡破坏。游戏王中有些怪兽带有【不会被选取作为对象】的抗性，因此这种以选取【对象】为文本的效果无法选择【不取对象】的怪兽作为目标。但是①的文本中不带有选取对象而是直接以【那张卡】为文本，所以可以选取【不取对象】的怪兽为目标。<br>③破坏场上的一张卡【才可以发动】，这张卡的【cost】是指破坏场上一张卡，而将手卡送入墓地才是【效果】。【cost】是指【代价】，它并非效果的一部分，而是发动效果的【前提】，因此又会有这么一个情况：【无效该效果】和【无效该发动】的效果会无效它丢弃手卡的效果，但是，它破坏场上一张卡的【cost】会在效果发动前结算，同时这个【cost】无法被无效。此外，因为这个效果的【送入墓地】并非是【cost】，cost 具有强制性，所以必须【送入墓地】，但是效果不具有强制性，所以在【大宇宙】【次元吸引者】效果适用的情况下该效果依旧适用，但是会被除外。</p></blockquote><p>看上去这个例子举的非常合理，表达了「看起来一样的效果，因为文本表达的差异和顺序会导致截然不同的适用情况」的意思。然而，马上有人对此提出了质疑：</p><blockquote><p>STN 的日常就是面对自己懂一点点观众全不懂的地方显得自己很懂<br>游戏王申奥本来就是某人作秀，我不懂为啥各种营销号要拿来反复宣传<br>文本问题我都懒得看，不存在的文本就别扯淡，也只有观众爆不懂才显得你说的有道理<br>K 语言有问题也不是这种一知半解的人能解释明白了<br>（转）</p></blockquote><p>而这条评论下面马上就有了其他观众的回复：</p><blockquote><p>A: stn 举的这几个例子又没问题，这次说的也没啥太难理解的，看得懂表达意思不就行了？<br>B to A：游戏王里面就没有『破坏卡片作为 cost』这种超模到离谱的 cost，up 还拿出来显摆<br>A to B：着明显只是举例子啊，又不是给牌佬看的视频</p></blockquote><p>争论的核心显然在于，能否拿一个不存在的例子来说明一个存在的问题（假定这个问题确实存在）。我对此倒是没有任何想法，专业问题就应该留给懂的人去争论。我想说的是，我从这些争论里，其实学到了什么是取对象，什么是 cost，丢弃手牌和送入墓地的区别。虽然这又是一个无用的知识吧，但是我至少知道了以前不知道的事情。</p><p>这就回到了前面的话题，对他人错误的指责，尤其是带有事实证明的指责，通常能让旁观者学到很多之前不知道的东西。我曾经不止一次表达过我对「睡前消息」这一节目的喜爱，并非是因为节目本身有多优秀。马逆也在节目中坦言：一群外行靠搜索引擎搜集资料写出来的东西，不可能比专业人士更加专业和具体，这也就是为什么每个科普作者都逃不过「听起来很有道理直到他讲到我熟悉的领域」这个定律。</p><p>所以，我最喜欢睡前消息的，并不是这一节目本身，而是网络上对这个节目事实错误的批判。或者用睡前消息公众号的系列文章来说，「兴风作浪的观众」。</p><p>而我觉得这也是我们看各种内容创作者时，真正最「有用」的部分。</p>]]></content>
    
    
    <summary type="html">在互联网上得到一个问题的答案的最佳方式就是让懂的人来骂你</summary>
    
    
    
    <category term="随笔" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活" scheme="https://blog.rekidunois.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>2020（财）年的总结</title>
    <link href="https://blog.rekidunois.cc/2021/08/end-of-2020-2021/"/>
    <id>https://blog.rekidunois.cc/2021/08/end-of-2020-2021/</id>
    <published>2021-08-02T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>本来我是打算过年的时候写一写年终总结，可是一过年啥都忘记了，现在才想起来有这么一回事。于是年终总结就变成了财年总结，还得带上一季度一起写（逃）。</p><h2 id="2020-农历新年后"><a href="#2020-农历新年后" class="headerlink" title="2020 农历新年后"></a>2020 农历新年后</h2><p>去年的新年是非常难忘的，全国上下进入了一种以前从未有过的状态。03 年非典的时候，我老家县城里并没有任何一例确诊病例，所以当时的我对于这场疫情的了解仅限于新闻和学校里讲卫生勤洗手的宣传而已。所以我们一直以为，老家是个福地，纵然和其他城市的人员交流并不少，但是总是很难在这种传染病疫情中遭受沉重的打击。</p><p>结果在新冠肺炎的疫情中，所有人都开始减少外出，取消了过年期间的走亲戚计划。在通了高铁之后，我们也在高铁上发现了小地方的第一例确诊病例。于是一车人都被拉去医院进行了隔离。除此之外，肺炎并未太多地在这里传染。</p><p>于是我很开心地能够不去走亲戚，能名正言顺地宅在家里。疫情期间我趁打折买了群星，一直玩到了怪物猎人冰原 dlc 的发布。但是突然发现自己并没有带手柄回老家，于是一咬牙，下单了微软精英手柄二代，然后趁着春节假期的延长，肝了一个多星期的冰原。</p><h2 id="头一次的居家工作体验"><a href="#头一次的居家工作体验" class="headerlink" title="头一次的居家工作体验"></a>头一次的居家工作体验</h2><p>随着时间的推移，确诊病例逐渐被控制下来，好消息越来越多。春节假期的结束也意味着有序返工的序幕被拉开。最开始的政策是能远程办公的公司尽量远程，不能远程的公司，则必须提供必须的防疫物资。比方说为员工提供口罩，每日体温检测，消毒水等。</p><p>我司一部分的工作确实是可以远程办公的。但是也有相当一部分的工作因为需要特定的设备而无法远程工作。解决方案就是本地的员工不得不现场上班，当远程工作人员有需要时，帮助他们操作设备。</p><p>与此同时，我司开始使用飞书作为内部沟通 IM，而且养成了每天早上语音开早会的习惯。虽然这一段早会基本上来说和我都没有太大关系，那时候我负责的业务还不是很多。</p><p>这一段时间对我来说是非常舒服的。以前我需求不饱和的时候，我只能发呆。因为干别的事情要被 hr 烦。而居家工作如果没事可做我就直接开一局冰原，神清气爽。</p><p>而且减掉了通勤时间之后，我开始自己做饭。一开始做的确实是乱七八糟，后来渐渐摸到了一些门道，总算是能做出能吃的东西了。但我后来还是放弃了自己做饭，主要就是因为耗时太多了。两餐饭一荤一素要用掉我将近一个小时的时间。本来我下班之后自由时间就不算多，一个小时的做饭时间根本没法接受。</p><h2 id="复工以后"><a href="#复工以后" class="headerlink" title="复工以后"></a>复工以后</h2><p>鉴于我司的工作需要特定设备才能进行，所以在居家工作两周之后，我们还是返回了办公室。而这个时候，这边已经有段时间没有出现新增病例了。公司为每个人都提供了免费的口罩和消毒水，还购置了体温枪每天测量体温。我一开始为了不想天天换口罩很麻烦，去京东买了个防毒面具，搞得和路霸一样。但是体验其实比医用口罩要好很多，因为眼镜上不会起雾。所以 lg 和雷蛇要推出的那种电动口罩我也有点想买的。当然后来因为太热了所以我还是换成了一次性口罩。</p><p>复工之后其实也没有特别多的变化，我自己做饭坚持了一个月不到吧，就决定还是吃外卖方便一点了。</p><h2 id="渐入佳境"><a href="#渐入佳境" class="headerlink" title="渐入佳境"></a>渐入佳境</h2><p>搜索新年之后的需求其实不多。我记得这段时间买了蓝牙键盘和蓝牙鼠标，我过起了一边肝 fgo 和 wows 一边补番的生活。这个时候我的社交重心慢慢转移到了电报群，QQ 的很多大学时代的朋友联系的都少了。当然，现在又和他们联系的多了，这是后话。</p><p>这段时间，我觉得我对公司项目结构的把握能力更上一层楼了。再也不会出现加了个文件就编译不过的低级错误，整个项目我已经可以操控自如了。</p><p>在后半年，主要的学习其实集中在了计算机科学方面。去看了 csapp 以及编译原理的网课，但是并没有完全看完。这些知识其实说枯燥也不枯燥，就是没什么参与感。我觉得我学习任何知识，还是能有办法实际操作的情况下会学的快一点。</p><h2 id="消费降级"><a href="#消费降级" class="headerlink" title="消费降级"></a>消费降级</h2><p>虽然经历了两次涨工资，但是我的存款其实并没有增长很多。所以慢慢对仅有的东西进行一些规划，比方说丢到收益率高一点的基金里，每个月都确认当月的消费，对消费总量进行降级。</p><p>我发现如果对整个月的收入和支出有一个大概的理解，平时花钱就不会大手大脚了。总的来说就是知道自己每个月还能剩下多少钱，然后按照我的仓鼠习性，只要总量在下降就会产生不安的感觉，然后就开始减少消费，整个总量就开始下降了。</p><p>然而 2020 年，氪金的大头还是给了 wows。我不知道时至今日我为啥还要玩这个游戏，但是那时候从一个个起火牌子上我可能确实是获得了相当的快感。买了挺多船的，但最后玩的最多的还是吾妻。</p><p>结果到 2020 年年末，我最终还是入坑了方舟，并且花的钱也不在少数。方舟应该是我第一个氪的这么多的手游，应该说一个塔防游戏还是深得我心的。</p><p>而其他的大笔支出，应该就只有红米 K30U 了。关于这个可以看一下我频道里的 <a href="https://t.me/RekiChannel/6269">简单总结</a>。写这篇总结的时候我已经用了很长一段时间了，考虑写一个更详细一点的体验。</p><h2 id="新的一年"><a href="#新的一年" class="headerlink" title="新的一年"></a>新的一年</h2><p>虽然都说新年新气象，但是从 19 年底开始的疫情其实尚未结束。即使是写这篇总结的现在，大陆依旧有海外输入性病例变成局部爆发的例子。而海外更加严重，由于 Delta 变异毒株在传播力上与现存疫苗研发时的病毒毒株相比增强了很多，再加上更多的变异毒株出现了免疫逃逸的现象，即使是疫苗接种率非常高的以色列，也开始了新一轮的疫情。整个世界的氛围实际上和 2020 年大同小异。</p><p>而在这样的背景之下，各地相继发出了「原地过年」的号召。特别是有疫情中风险地区存在的地区。导致我这一年买春运火车票非常容易。虽然我很期待头一次在外过年，不过深圳当时并没有中风险以上的地区，所以我还是乖乖回去过年了。</p><p>基本恢复正常的新年之后，生活也慢慢恢复了正常。</p><h3 id="健康问题"><a href="#健康问题" class="headerlink" title="健康问题"></a>健康问题</h3><p>过年之后，我去进行了差不多五年没有进行的体检（我司居然不要求入职体检）。我以为结果会很糟糕，但是没想到那么糟糕。</p><p>首先是中度脂肪肝。所有的医生看到这个问题之后都在劝我不要喝酒。我真的冤枉，我活到现在，除了尝鲜以外基本是滴酒不沾的。然而还是脂肪肝了，证明过去几年的饮食相当不健康。</p><p>其次是 34% 的体脂率。这实在是太过分了。BMI 也到了一个无法忍受的地步。</p><p>最后是过高的尿酸。这个我是怎么都没想到的。因为尿酸这个东西基本和海鲜有关系，但是鱼我一向是很好吃的。然后医生认为我可能是夜宵吃的多。但是在仔细思考之后，我发现早餐豆浆喝多了也可能导致尿酸。还有饮水不足也可能是一大原因。</p><p>在这个情况下，我开始增加使用健身环的次数，并且基本戒掉了含糖的饮料。作用还是非常大的，体重在一两个月之内就下降了将近 6kg。希望我能在接下来的一年坚持减脂，明年体检的时候一定要甩掉脂肪肝、高体脂和高尿酸的问题。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从开始想要写总结的过年，到第一季度结束真正开始动笔，到现在 2021 年过半了，我总算是基本完成了这一篇 2020 年和 2021 年前半的总结。</p><p>头一次写类似的东西，我应该还有很多好写但是没有写出来的。希望 2021 年接下来的时间能够创造更多值得一写的回忆吧。</p>]]></content>
    
    
    <summary type="html">人类的本质是咕咕咕</summary>
    
    
    
    <category term="阶段总结" scheme="https://blog.rekidunois.cc/categories/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="生活" scheme="https://blog.rekidunois.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="年终总结" scheme="https://blog.rekidunois.cc/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>如何度过日常生活？</title>
    <link href="https://blog.rekidunois.cc/2021/08/how-to-get-through-daily-life/"/>
    <id>https://blog.rekidunois.cc/2021/08/how-to-get-through-daily-life/</id>
    <published>2021-08-01T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近过的实在是不怎么样。"><a href="#最近过的实在是不怎么样。" class="headerlink" title="最近过的实在是不怎么样。"></a>最近过的实在是不怎么样。</h2><p>我最近产生了一种很奇怪的情绪。自从明日方舟周年庆以来，我已经有差不多三个月没有氪任何金了。甚至我手上两个氪金手游，三个月的时间我连卡都没有抽过。理由其实很简单，没啥想要的卡，以及接下来的饼。</p><p>而不单只是氪金，其他消费的东西我也很少。我每个月都会算账，这几个月的非必须品消费比以往来说其实小了很多。</p><p>所以这一切造成了我最近开始有了「我 tm 好想买爆啊」的情绪。我想买 iPad，我想买全新的 macbook，而代表虚拟世界的消费，我想氪金氪到爆，只是等手游给我一个氪金的理由。</p><p>其实回顾我之前的消费历史来说，这些都能算作是冲动消费，是我想要尽力避免的。我不怕消费，只是希望自己花的钱能够物有所值。虽然我今后仍旧会用这一信条约束自己，但是我不能不去注意到我内心那个疯狂的想要买买买的声音。</p><p>而这些情绪其实并不单只是如此而已。自从河南水灾以来，我在网络群聊中与别人吵架的次数上升了很多。我觉得这固然和大家的立场可能本来就有所不同有关。但是，我自己的情绪也处在不停爆发的状态中。</p><p>我开始觉得很多事情都不如自己所愿。虽然确实发生了一些不好的事情，比如说体重没有接着下降，比如说我的耳机其中一边的线裂开了，比如家里无缘无故断网两天最后发现是楼下光纤坏掉了，诸如此类。</p><p>人在发生不好的事情的时候总会从以前做过或者听过的事里汲取经验，然后去想办法补救，或者去寻求帮助。上面所说的事情也许也就只是我在频道里哀嚎一声，然后假如我有粉丝的话会回一句「草」的程度而已，没什么大不了的。但是我的情绪却开始变得非常糟糕，最近慢慢已经感觉失去了做很多事情的动力了，有时候宁愿发呆也不想干活。</p><p>我其实在高中和初中的时候体会过这样的情绪。说起来可能你们不信，当我完整地解析一道题目的时候，我是能从中获得成就感的，但是我的成绩却并没有因为我对解题有兴趣而变得有多好。用我初中老师的话来说就是，要是我做的题目能有和我最好状态时同等水平的人一半多，那我的成绩就不会起伏那么大了。</p><p>但是我有时候完成了老师布置的必须检查的作业，我就是没那个心思去做额外的题目。初中的时候我莫名其妙开始和同学一起学五十音和魔兽争霸，高中的时候整个高三我都在思考，我上了大学要买什么电脑好，总之就是不想刷题。</p><h2 id="开始与自己和解"><a href="#开始与自己和解" class="headerlink" title="开始与自己和解"></a>开始与自己和解</h2><p>我很久以前就看过一个叫 giguk 的人评论各种动画的视频。很多年过去了，最近突然又在首页看到别人翻译他的视频，于是我就想起了这个才华横溢而思考又非常深刻的漫评家。做什么事情都索然无味的我开始津津有味地看起了他的动画评论视频，以至于到了茶不思饭不想的地步。</p><p>直到我刚刚看完了 giguk 关于自己为什么会喜欢烂番的 <a href="https://www.bilibili.com/video/BV1xJ411t7ui">视频</a>，我才想要去写这一篇博客。虽然跟动画相关的东西我没怎么记住，但是我记住了它里面说的一件事，就是他认为整个动画行业欣欣向荣，但是偶尔还是会觉得没什么好看的动画的原因。</p><p>他的原话大概是：「我在看每一部动画的时候都在焦虑，这一部动画是不是我现在能看的最好的动画，我应不应该去花时间看这部动画，还是我不应该把时间浪费在这部动画上面，因为还有更多更好的动画值得我花时间去看。」</p><p>而这种焦虑的来源其实是，他害怕自己有一天真的看完了所有优秀的动画，而剩下的都是套路烂俗的爆米花动画。但是他又没有办法拒绝烂俗套路的动画的魅力。比方说他知道很多千篇一律的异世界动画很烂，但是他就是喜欢刀剑神域那种龙傲天套路（虽然他批评刀剑批评了很长的时间）。而他的疑虑其实就是，难道看烂番的时候不正是上面提到的焦虑集中发作的时候吗？在看烂番的时候，尤其是本人知道这部番就是烂番的时候，上述焦虑应该比看好番的时候更加严重才是。但是 giguk 还是花了大量的时间去看这些烂番。</p><p>随后的 giguk 花了很多时间论证这一点，不过与动画本身相关的论述其实和这篇博文没什么关系。我想讲的其实是他的这个心态和我前段时间的生活有一种异曲同工之妙。</p><p>在前段时间，我把 GitHub 的 Profile，把工作上客户上报的 bug 数量，把手游的体力规划，把健身环的时间和燃烧的卡路里量，把减肥时为自己安排的素食餐都当成了自己每天必须完成的 kpi。</p><p>不可否认的是，最开始这么做的时候我有一种满足感。我觉得我自己的人生正在正轨上飞速前进。身体变得健康，工作上和娱乐上的技术变得越发娴熟，似乎一切的一切都能信手拈来。但是我没有想到的是，这一切其实消耗了我大量的时间和精力，并且它们都不是那种拿得起就可以放得下 —— 至少对于我自己来说 —— 的东西。</p><p>而这种 kpi 式的生活最大的麻烦就是，如果你能完成每天的 kpi 自然无事，但是如果有一天某些 kpi 你无法完成了，你就会开始发生 giguk 的那种焦虑 —— 特别是当你还有时间却就是不想要完成这些 kpi 的时候。</p><p>你会开始逼迫自己去完成这些 kpi，但是实际上收效甚微。回到家你觉得你应该多写点代码，但实际上你并不想写，你会打开 vscode 然后刷一晚上的 telegram，一行代码都没有写，或者只是装模作样地加了几句注释。</p><p>而更严重的是，你有时候明明正在做有益于自己的事情，但是却因为没有完成当天的 kpi 而感到焦虑。比方说，我在学习前端代码，而有线东西其实未必就需要很多练习，你可以不自己去动手写，去看文档或者源码看懂了某个概念之后就可以了。比方说 webpack 的一些基础概念，看懂文档之后我马上就能看明白别人写的 webpack 配置具体在干什么了。</p><p>但是看文档或者看源码学东西这件事情，本身是没有可以量化的 kpi 的。并且它也不能完成前面提到的其他我给自己设立的 kpi。</p><p>具体来说，除了工作上的时间，我其他时间需要多写写代码，自己的 GitHub Profile 才会多一点绿色。但我如果去学概念而不写代码的话，当天也许一个 Contribution 都没有，那一天的 Prifile 就没有变绿，而我天然地给自己设立了每天都要变绿的 kpi 的话，我就会开始变得焦虑起来。</p><p>而我从 giguk 的视频中得到了什么样的启发呢？那就是这一节的小标题 —— 与自己和解。</p><h2 id="如何过好你的每日生活"><a href="#如何过好你的每日生活" class="headerlink" title="如何过好你的每日生活"></a>如何过好你的每日生活</h2><p>塞壬唱片有一首歌叫做「<a href="https://monster-siren.hypergryph.com/music/953928">DayDayDream</a>」，翻译过来就是白日梦。我非常喜欢这首歌，这首歌的旋律非常契合它的歌词。</p><p>这首歌的歌词大意是，你每天过的很紧张，很焦虑，是因为你对现状不满，但是你知道最终你一定会找到能让你满意的生活，所以不如来做做白日梦吧！</p><p>而这样的态度其实就和 giguk 提到的他明知道一部番是烂番，而只要里面有自己喜欢的元素在，能够吸引到自己他就会去看几乎一模一样。</p><p>giguk 肯定不会满足于只看肤浅的作品，他一定希望能看更多更优秀更深刻的作品。就像我未必就对现在的生活完全满意，而我也致力于通过把一些事情 kpi 化来让自己的能力得到提高，从而能够让自己的生活过的更好。但这和当前还没有成功时候，做做白日梦其实不冲突。</p><p>前面也有提到，把生活中的一些事情 kpi 化，会耗费一个人大量的精力和时间。从而让自己在做其他事情的时候感到「我无法完成今天的 kpi 了」的焦虑，但是这其实毫无必要。也许 kpi 本身很有道理，但是我要做的事情就算与 kpi 无关，也未必是对我自己就完全没有用处的东西，就像前面所说的看文档不能涨 GitHub Profile 的 kpi 一样，看文档学到的东西对自己来说一定不是什么坏事，对这样的事情抱有「无法完成 kpi」式的焦虑完全是多余的心态。</p><p>所以，就像 giguk 和 DayDayDream 都提到的那样，我完全可以在下班之后，躺在椅子上，看直播发一晚上的呆，打一晚上的游戏，完全不去管自己给自己定的目标 —— 一会儿。然后再精神百倍地去做那些对自己有益的事情。与专注 kpi 的那个自己和解，让自己过上真正意义上张驰有度的生活。</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>之前的那篇总结其实是很久以前咕咕咕出来的产物，而今天用了差不多一个多小时的时间就写出了挺长的一篇文章，连我自己也比较惊讶。但是这完全是属于最近一段时间的不吐不快了。虽然我觉得博客文章篇幅像现在这样很好，但是其实有些博客内容也写不到这么长。接下来我也许会多写几篇中短长度的文章，来记录一下最近做的有趣的事情。也算是放松一下自己，就像前面说的，讲咁多托柒咩，吔个包先啦。</p>]]></content>
    
    
    <summary type="html">我其实一直相信人的运气会有盛极而衰，衰极而盛的轮回。</summary>
    
    
    
    <category term="随笔" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="生活" scheme="https://blog.rekidunois.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="胡言乱语" scheme="https://blog.rekidunois.cc/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
    <category term="时间" scheme="https://blog.rekidunois.cc/tags/%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>Notion 随笔集合（一）</title>
    <link href="https://blog.rekidunois.cc/2020/12/Notion-Nonsense-EP1/"/>
    <id>https://blog.rekidunois.cc/2020/12/Notion-Nonsense-EP1/</id>
    <published>2020-12-08T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<p>今年某个时候决定开始使用 Notion，它有一个非常爽的功能就是可以直接将网页的内容保存到你的 Notion 笔记里。所以很方便用来做笔记，也很方便写些什么。</p><p>我发现自己标注为随笔的一个页面已经写了不少东西了，决定整理一下发到博客里（主要是想水博客）</p><h2 id="Notion-小记"><a href="#Notion-小记" class="headerlink" title="Notion 小记"></a>Notion 小记</h2><p>唯一的遗憾就是无法离线你的笔记。昨天我家里网络有点问题，所以很多东西都不能传上去或者修改之类的。其他的地方我觉得都非常好。</p><p>再研究一下模板之类的怎么用，然后看看有没有必要付费使用。我觉得 VS Code 要做到 Notion 这样的效果还需要专门的插件才能做到。</p><p>当然 Notion 自己也没有插件这样的东西，也有一些需求</p><blockquote><p>评论：这后面是不是有什么话没说完？</p></blockquote><h2 id="20200810"><a href="#20200810" class="headerlink" title="20200810"></a>20200810</h2><p>看起来，Windows 上的程序主窗口一个必须要做的事情就是客制化边框、标题栏和右上角的三个按钮，不然内里的 UI 做的再精美，整个软件的档次感觉就下降了（潜台词就是默认边框丑）</p><blockquote><p>评论：看起来并不是按照时间排列的<br>以及：其实很多软件都只是停留在做自己的标题栏，并没有给边框增加圆角。</p></blockquote><h2 id="Notion-的网络。"><a href="#Notion-的网络。" class="headerlink" title="Notion 的网络。.."></a>Notion 的网络。..</h2><p>桌面的软件不知道为什么总是会上传失败，不管是文件还是图片。</p><p>后来我发现网页版也还行，并且没有这个问题，看来还是要用网页版。</p><p>看看能不能安装网页 app</p><blockquote><p>评论：结果现在都是用网页然后安装成应用在用了。但是网络确实非常慢，只是好歹能用</p></blockquote><h2 id="2020-年-8-月-13-日"><a href="#2020-年-8-月-13-日" class="headerlink" title="2020 年 8 月 13 日"></a>2020 年 8 月 13 日</h2><p>优质键政是很能引人思考引人向上的力量。</p><p>劣质键政还不如打游戏，对喷键政不如打游戏对喷。</p><blockquote><p>评论：劣质键政容易让人睡不着觉</p></blockquote><h2 id="2020-年-8-月-16-日"><a href="#2020-年-8-月-16-日" class="headerlink" title="2020 年 8 月 16 日"></a>2020 年 8 月 16 日</h2><p>还是太菜了，菜到连公司都看不下去了。</p><p>当然准时下班是少不了的。所以以后要经常把电脑带回家，现在还不到我回家就玩游戏的时候，还是要多练习代码才能以后天天玩游戏。</p><p>不过最近是真的忙。</p><blockquote><p>评论：其实我自己学的东西真的很少有东西能应用到工作中来，毕竟公司用的是 2013 年的东西（</p></blockquote><h2 id="2020-年-8-月-18-日"><a href="#2020-年-8-月-18-日" class="headerlink" title="2020 年 8 月 18 日"></a>2020 年 8 月 18 日</h2><p>原来三湾改编的内容如此简单，却又如此强而有力</p><p>我好想打完活动，好想接着肝泳装，又好想肝 wows，事情太多根本忙不过来</p><blockquote><p>评论：又是砍口垒开活动的时节，wows 没啥想肝的了，然后就入坑了明日方舟。对于砍口垒我只有一句话：坐而言不如起而行。</p></blockquote><h2 id="2020-年-8-月-20-日"><a href="#2020-年-8-月-20-日" class="headerlink" title="2020 年 8 月 20 日"></a>2020 年 8 月 20 日</h2><p>还是很担心被开。..</p><p>确实给私人老板打工不容易。</p><p>虽然我这个月工资似乎涨了？</p><p>我还是多写写算法题吧（</p><blockquote><p>评论：啊原来我涨过工资的吗</p></blockquote><h2 id="2020-年-9-月-15-日"><a href="#2020-年-9-月-15-日" class="headerlink" title="2020 年 9 月 15 日"></a>2020 年 9 月 15 日</h2><p>买了小号的红轴键盘放办公室，舒服了很多，右手不用拐出去了</p><p>但是桌面感觉还是差点意思。姑且买了亚克力架子，可以在上面放书</p><p>问题就是再买一个屏幕的耗费有点大，不知道要不要弄。毕竟（</p><blockquote><p>评论：家里也是 84 键的，不过是青轴，真的挺舒服的，当然要记得装额外的小键盘。</p></blockquote><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>不知道为什么，在副屏幕打字总有点卡卡的</p><p>不过好象是 telegram 的问题，在 notion 里打字就不会有这种感觉</p><p>好神奇，只有 telegram 打字会有这种延迟的感觉，但是在 notion 里就完全不会</p><p>我感觉调成两边一致两边都有点卡卡的，但是因为我主屏幕是 144 所以可能感觉不太出来，动画会流畅很多</p><p>然后使用 notion 就完全没有区别了，基本看不出来</p><p>（144 真强啊）</p><blockquote><p>评论：其实这个是 telegram 的问题，时不时会出现打字的时候 cpu 飙升然后就变卡，所以现在 Unigram 和 Telegram 混着用。</p></blockquote><h2 id="2020-12-05（看这个标题，是用小狼毫自动生成的日期！）"><a href="#2020-12-05（看这个标题，是用小狼毫自动生成的日期！）" class="headerlink" title="2020-12-05（看这个标题，是用小狼毫自动生成的日期！）"></a>2020-12-05（看这个标题，是用小狼毫自动生成的日期！）</h2><p>Telegram 突然爆炸了不知道为什么。..</p><p>然后我还是处于想要写点什么，那就还是来这里写吧。</p><p>今天把 2k 屏幕的缩放调到了自定义的 115%，看起来比 100% 要舒服很多。</p><p>并且切换到了 Unigram，打字终于不会卡了。</p><p>然后它服务器就爆炸了。</p><p>xaml 的学习曲线确实非常陡峭，只是弄些皮毛都是举步维艰的。</p><p>不过 WinUi 提供的控件确实好用。</p><p>我觉得还是把我的 Twitter 锁起来比较好。</p><p>考虑把这里的随笔整理一下发博客。</p><blockquote><p>评论：然后现在发出来了（</p></blockquote><h2 id="2020-12-06"><a href="#2020-12-06" class="headerlink" title="2020-12-06"></a>2020-12-06</h2><p>我感觉我学东西好慢啊。..</p><p>好多进一步开发需要的东西我都花好长时间才能学会。</p><p>学会之后发现，那只不过是一层窗户纸，一捅就破。</p><p>然后实际上也没学到太多。</p><blockquote><p>评论：昨天晚上睡不着看 AutoFac 的时候就有这种感觉，自己终于开始理解什么是依赖注入而且自己以前明明就做过类似的操作。</p></blockquote><p>PS：原来 hexo 是看 MarkDown 文件创建日期来决定文章的发布日期的</p>]]></content>
    
    
    <summary type="html">谁知道我当时写这些东西的时候在想什么</summary>
    
    
    
    <category term="随笔" scheme="https://blog.rekidunois.cc/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="胡言乱语" scheme="https://blog.rekidunois.cc/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>正式工作一年半（实习以来两年半）的一点碎碎念</title>
    <link href="https://blog.rekidunois.cc/2020/11/One-Year-For-Work/"/>
    <id>https://blog.rekidunois.cc/2020/11/One-Year-For-Work/</id>
    <published>2020-11-27T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Tempora mutantur, nos et mutamur in illis;</p></blockquote><p>大学以前我最想要的东西就是一台个人电脑。但是家里只有一台老旧的电脑，还是和爸妈共用的，为了多少能体验一下电子设备，省吃俭用买了台三百块的手机，爸妈知道后我还被骂了一顿。</p><p>大学以后我最想要的就是自己一个人住的单间，因为学校宿舍的条件实在太过恶劣。但是在大学我还是用电脑做了很多事情，虽然那台电脑特别破。</p><p>实习被我认为是逃离垃圾大学的第一步。实习之前有个和学校合作的培训公司跑过来给全班人强制培训，因为内容是硬件所以我毫无兴趣（并且据熟悉硬件的舍友说，他教的东西大一学生都会做，而且他还真的让他一个大一学弟来顶替他上课）。这时候接到了现在这家公司的面试请求，于是请假跑去深圳面试，住了一天然后回来（这样可以请两天假不去培训）。最开始我不觉得我能过，因为我以为他们是用 c# 和 .Net 的公司，结果面试题是 c。然后我 c 基本学的一塌糊涂，cs 基础几乎等于没有（因为学校都没教，我也不知道该学啥）。唯一会的就是链表，而且还很多错。</p><p>没想到最后居然同意我实习了。同期有两个毕业生，他们试用期我实习期。最开始的日子非常悠闲，甚至没有布置任务。由于旧的办公室人坐满了，我们三个是在隔壁楼新租的办公室。没有上司看着你工作，再加上任务没布置/布置了也没有很重，同期的一个人甚至买了台 Xbox 放办公室里，接办公室的 4k 屏玩大镖客。</p><p>实习的结果，我没有按时完成我的第一个任务。虽然相关代码在 dead line 前两天才给我，我要从其中一个项目迁移到另一个项目中。开发途中的需求也不断修改，而且事后我觉得，这个需求并不是非常好做。我当时害怕及了，HR 并没有跟我聊有关转正的事情，我已经做好了毕业去重新找工作的准备了。结果之后我还是安全转正了，并且顺利负责了其他的项目。</p><p>在经历了蠢的要死的毕业设计，跟副院长斗智斗勇之后，总算是顺利毕业了。成为了正式工，我却感觉和实习的时候没有特别大的区别。给我分配的项目依旧很少，以至于很多需要提供的需求在 deadline 之前几天才会给我。而我秉承不想加班的理念，很多项目被几个人一起顺理成章地拖慢了。这时候我渐渐发现了公司代码的一些问题。</p><p>提报的闪退，崩溃问题非常多，但是我们的日志输出是很乱的，并且崩溃在日志上也不一定能看得出来。我觉得 c++ 要规避很多崩溃问题，肯定需要添加单元测试。但是整个公司的 c++ 项目使用的还是 msvc 2013 版本的编译器，并且使用比较旧版本的 Qt，新的测试项目引用这些代码之后不能通过编译，添加单元测试的想法一直停留在想法里。我不确定我这个项目能不能升级，升级之后其他的项目要不要一起升级，愿不愿意升级。总之就是和大多数代码故事里说的一样，屎山依旧是屎山，很难改变。</p><p>我想了很多办法提升开发体验。甚至想过用 .Net 重构一个项目。其实最近需要上架微软商城的需求，就是重构的好时机，但是上司直接说：我们不可能用微软的技术栈重新写一个项目。所以这条路就死了。停留在旧代码的这个项目，在之后的迭代中会发生什么事情真的难以预料。</p><p>我每修改一行代码就在担心，这样会不会导致崩溃，会不会功能不正确，会不会让我的评价进一步降低？之前 hr 已经和我聊过说测试认为我发的版本质量比其他人都低，我说没办法啊，要么你加班自己测试各种情况测出来再改，改完了再发版本。要么写单元测试代码，规避常见错误的同时，对于以前已经发生过的错误也能保证修改代码后不会再次出现。</p><p>但是说实话，我自己有几斤几两很清楚。我是个下决心要学 WPF 然后研究了半天项目结构如何组织，最后慢慢就放弃了的菜鸡程序员。崩溃问题我自己写出来的也有很多，低级错误也没少犯。以至于到今天我写每一行代码都还是战战兢兢，思前想后，畏首畏尾。发的每一个版本都害怕会不会出现问题，奇奇怪怪的 Windows Api 经常看半天不知道他要干嘛。自己喜欢的技术，也经常觉得自己是叶公好龙，看半天一个能看的玩意儿都做不出来。渐渐的我也失去了追求更好的技术的信心，每天除了工作就只是打游戏。</p><p>最近开始研究 WinUI，发现里面提供了非常多开箱即用的东西，而且不一定非得写 UWP，可以写 Win32，感觉之前碎片化学习的东西，慢慢都能一点点组合起来用了。感觉重拾了一点点信心，开始搞很久以前就想做的音乐播放器了。希望这一次不要半途而废吧。</p><p>这三年来我玩的游戏可能没有大学三年多，但是玩的时间说不定比大学三年长，而且常玩的游戏居然没什么特别大的变化。砍口垒，wows，fgo，风暴英雄，文明6。最近开始玩方舟，塔防游戏也能算是我很喜欢的游戏类型，唯一玩的变少的游戏可能是音游了吧。感觉自己反应真的不如高考完那时候好了，很多当时能 fc 的曲子现在怎么打怎么死。</p><p>其实对我来说，游戏和编程区别也不算大。都是我的爱好，只是编程是有学习曲线的，你在其中遇到的挫折会比游戏多得多。而游戏开发者肯定希望你花更多的时间在游戏上，所以你可能遇到的挫折更少，或者更容易克服。虽然我游戏玩的也不是很好，但我还是希望我编程也能像游戏一样，总能找到令我满意的解。</p><p>出来社会一年多，其实我内心感觉以前的朋友门混的大概都比我好。爸妈嘴巴上说着你开心就好，实际上买房买车找老婆，交家用，这些其他人要考虑的事情他们一个也没有少想。只是我们之间交流不如其他父母和孩子之间深入，我又是能不说话就不说话的性格，所以聊的不是很多吧。很多事情我有默默在做，但是非让我说出来我更倾向于保持沉默。「老死不相往来」是我觉得我对现实人际关系的一种犬儒。先不论父母，朋友什么的我觉得我已经伤害了很多人的感情了，与其继续接触新的朋友然后再伤害他们，不如不要和更多的人交流，以免有人受伤。</p><p>毕业的时候我与自己顶下了三年之约，三年后的自己要更加优秀，让自己更满意，找到更好的工作。三年过半，我觉得这个约定可能非常难实现了。但是好在自己也不能把自己怎么样，这个约定不管是三年还是五年，我都会一直往前走，直到真正实现这个约定为止。</p><blockquote><p>希望与未来的自己相遇在更加广阔的海洋上</p></blockquote><p>The end</p>]]></content>
    
    
    <summary type="html">我花了一年多的时间来取悦自己，然后发现自己是真的菜。</summary>
    
    
    
    <category term="阶段总结" scheme="https://blog.rekidunois.cc/categories/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="杂谈" scheme="https://blog.rekidunois.cc/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="胡言乱语" scheme="https://blog.rekidunois.cc/tags/%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
    <category term="时间" scheme="https://blog.rekidunois.cc/tags/%E6%97%B6%E9%97%B4/"/>
    
    <category term="工作" scheme="https://blog.rekidunois.cc/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>2020 年的 iPad 能为你做什么？</title>
    <link href="https://blog.rekidunois.cc/2020/06/iPad-mini5-Reviews/"/>
    <id>https://blog.rekidunois.cc/2020/06/iPad-mini5-Reviews/</id>
    <published>2020-06-19T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>iPhone: 用户不知道他们想要什么，直到我们推出了产品<br>iPad: 公司不知道用户想要什么，直到用户买了产品</p></blockquote><p>从 iPad Pro 开始，苹果就有意增强 iPad 办公方面的能力。而在此之前 iPad 是主打娱乐功能的产品。看个视频打个游戏，屏幕又大续航又好，在平板电脑这个领域其综合实力超过了绝大多数的对手，唯一的短板便是生产力这一块。而随着 Windows 平板和 Chrome OS 在生产工具端的发力，iPad 确确实实感受到了压力，比如说在教育领域。<br>市场如何变化其实我并不关心，我比较感兴趣的是各种设备的功能。iPad 本来对于我也确实只是娱乐设备，用来看看视频打打游戏非常方便。但，iPadOS 的生产力更新真的于我而言毫无作用吗？</p><h2 id="生产力-键盘-鼠标"><a href="#生产力-键盘-鼠标" class="headerlink" title="生产力=键盘+鼠标"></a>生产力=键盘+鼠标</h2><p>我手上的这款是 iPad mini 5. 论性能和续航都算是比较 OK 的产品，还能使用 apple pencil.</p><p>但是你拿他当生产力用有个问题：你需要长时间低头，或者长时间举手。放在桌子上手不用举起来，但是颈椎要向下弯，对于我这种显示器都要用支架弄到和我视线平齐的人来说，自然是非常不爽的。而如果把 iPad 也挂起来，或者用手举着，怎么说长时间都会很累。要长时间使用它，iOS 13 更新后支持的蓝牙鼠标键盘连接就非常有必要了。因为你可以把它挂起来然后手放在桌子上操作，脖子也不用一直低着。并且 iPadOS 13.4 更新之后的鼠标连接比之前的也更棒了：光标更好看，动画效果更多更直观。<br>为此，我购入了罗技 K380 和 M336 键盘鼠标，来配合我的 mini5 使用。</p><h3 id="K380-中规中矩"><a href="#K380-中规中矩" class="headerlink" title="K380: 中规中矩"></a>K380: 中规中矩</h3><p>我对蓝牙键盘还是有一定的便携需求，所以没有用手上那把红轴机械。再加上本来这把机械的蓝牙就不是很好，我现在都是用有线模式来使用，在京东购买了 K380, 我认为还是比较值得的。<br>她就是一块普通的笔记本键盘，拆下来加上蓝牙的那种感觉。手感还算过得去，不会因为需要便携性而弄的过于狭窄，打字肯定没有问题。没有小键盘，有 Fin 键和功能键。支持三个设备连接和切换，蓝牙的开关就在外面，开关起来很容易，这也能节省电池的用量。毕竟我那把红轴蓝牙就是因为蓝牙开关在背面，每次要掀起来才能开关，我就懒得关，结果续航就尿崩，几个星期就要换一次电池。<br>我的键盘比鼠标早一天到（因为我鼠标买错买成只支持 2.4g 的，所以退掉重新下单了 M336), 鼠标没到的时候我就在研究键盘。发现还是有不少快捷键可以用。比方说和 Windows 逻辑一致的 Alt + tab 切换应用，空格滚动网页等等。剩下的就是各个 app 对快捷键的支持了。长按 MacOS 上的 cmd 键可以看到当前 App 所支持的快捷键。<br><img src="/images/blog/2020-04-13-15-45-46.png" alt="Reeder 4 所支持的快捷键，大多是和 MacOS 上的相同或相似"></p><p>我用的应用还是有很多没有对键盘快捷键进行支持，这也应该是支持连接键盘的设备不多的原因。个人认为 iPadOS 要想在生产端发力，那么应用对快捷键的支持肯定也是必不可少的。</p><h3 id="M336-差强人意"><a href="#M336-差强人意" class="headerlink" title="M336: 差强人意"></a>M336: 差强人意</h3><p>M336 是相对比较便宜的一款蓝牙鼠标，她所支持的也只是蓝牙 3.0 协议。而且对于我的手来说实在是有点小，不得不使用抓鼠手法使用。除此之外蓝牙输入设备会出现的卡顿也会出现，但是也算是勉强够用的设备。<br>抛开鼠标本身的素质不谈，鼠标 + iPad 绝对是如虎添翼一般的存在。前面也有讲到我是把她挂起来使用的，有了鼠标之后，我就几乎能做所有事情了。无论是码字，阅读还是聊天，我的 iPad 从此变成了一台小笔记本一般的存在。浏览信息流，看 rss 订阅，和别人聊天，用 OneNote 记笔记。我一直苦恼于 Windows 上没有用的顺手的 RSS 阅读器，这下我可以暂时不用烦恼了，直接用 Reeder 就是了。<br>iPad 除了满足生产力需求，其娱乐能力也是非常不错的。看视频就不说了，我还在上面尝试了很多手游。首先配合鼠标，就可以很轻松地在桌面状态下玩手游，而不必低着头或者把手机/平板举起来。虽然如果要同时操作电脑和平板的时候，要不停切换鼠标很难受，但是其实从理论上来说，iPad 的画面是可以投射到 PC 上播放，并且可以直接控制 iPad 的。只是现在实现了这个功能的投屏接收端几乎没有而已。如果实现了，就可以用一套键鼠同时操作电脑和平板，加上 Android 设备可以使用的 scrcpy, 移动设备就可以完全使用 PC 来控制，操作体验上更加无缝了。</p><h2 id="所以-iPad-的需求到底是什么？"><a href="#所以-iPad-的需求到底是什么？" class="headerlink" title="所以 iPad 的需求到底是什么？"></a>所以 iPad 的需求到底是什么？</h2><p>这其实是我一直以来相信的事情。电子设备之所以会有平台之争，一方面是因为商业公司之间会有竞争，另一方面也是因为百花齐放才是这个领域保持缤纷多彩的原因之一。所以作为用户，如果在这个平台上有做不到的事情，那就把能做到这件事的平台也拿来用就好了。iOS 上看不了 EHViewer, 那我就买一台 Android. Windows 上玩不了 FGO, 那我就去买一台 iPad. 如果有人说他可以用一台设备，就处理生活，工作和娱乐的所有事情，那固然非常厉害。但是如果我从 iOS 到 Android, 从 Windows 到 MacOs 全都用上，那不也挺好的嘛？现在我已经有了 iPad, 主力的手机是 iPhone, 副机是 Android, 可能就差一台 Mac 了。<br>但是因为我也没有用过 Mac, 并不确定 MacBook 和 iPad 之间是否会有重叠的需求。我唯一能想到的就是 Mac 玩不了手游。其他的 iPad 可能就只剩下续航和便携性了吧。要论操控，即使大家都希望 MacBook 能添加触屏，但是我还是觉得自带键盘和触控板的 MacBook 要比 iPad 在操控方面是要好一点的。虽然 iPad 现在可以添加这两样外设了。<br>另外 ,Apple Pencil 很好用，用来画个示意图或者理清思路的时候非常方便。就是一代的笔会经常忘记充电。二代就好多了，可以贴在 iPad 上无线充电，只要 iPad 是有电的，笔就不会没电。</p><h2 id="One-more-things"><a href="#One-more-things" class="headerlink" title="One more things"></a>One more things</h2><p>不知道从什么时候开始，新闻开始说苹果有意使用自家的 ARM 芯片来代替 MacBook 中的 Intel 芯片。而两天后的 WWDC, 据说苹果会终于宣布一台使用 ARM 处理器来驱动的 MacBook. 不知道这一步对于 MacBook 和 iPad 来说都意味着什么，但是我个人还是非常感兴趣的。</p>]]></content>
    
    
    <summary type="html">iPad 的需求其实是用户自己创造的</summary>
    
    
    
    <category term="产品体验" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    
    <category term="平板电脑" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91/"/>
    
    
    <category term="iPad" scheme="https://blog.rekidunois.cc/tags/iPad/"/>
    
    <category term="iOS 13" scheme="https://blog.rekidunois.cc/tags/iOS-13/"/>
    
  </entry>
  
  <entry>
    <title>最便宜的二手 835 安卓手机之一，我的第二台安卓智能设备！</title>
    <link href="https://blog.rekidunois.cc/2020/01/LG-V30-Reviews/"/>
    <id>https://blog.rekidunois.cc/2020/01/LG-V30-Reviews/</id>
    <published>2020-01-28T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.944Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>买这部手机的目的就是，砍口垒，哈吉马路由！</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实严格来说，我的第一台智能手机确实是安卓机。是当年最便宜 (300cny) 就能买得到的酷派，型号是啥忘记了。甚至这 300 我还是跟同学借的无息贷款才能买。然后同学也买了，但是高考前两百多天他就被老师收了我的还在（逃</p><p>不过高考结束之后我就买了 iPhone 6, 并且一直用到了大四末尾才换了 iPhone 8. 而且即使换了之后，我的 iPhone 6 还在作为我的游戏机继续服役（说着就拿出来摸了一下 PCR).</p><p>虽然我对于 iPhone 的怨言基本只有续航，但是确实有些事情只有 Android 上才能做，比方说砍口垒<del>和 EHentai, 还有 PronHub, 还有被封禁的 Telegram 频道（虽然在之后的更新中 ios 也能浏览那种频道了）</del>. 所以说，还是有必要弄一台 Android 手机的。而且对 Android 进行各种调教，这种乐趣在不对 iOS 进行越狱的现在，也就只能在 Android 上才能体验到了。</p><h2 id="最便宜的-835"><a href="#最便宜的-835" class="headerlink" title="最便宜的 835?"></a>最便宜的 835?</h2><p>LG-V30 是 LG 在 2017 年发布的手机，其实按理来说时间还不算很长，你看隔壁小米 6 不也是 17 年发布的嘛（笑）<br>这东西解锁没有什么难度，也没有什么额外的溢价，所以二手市场上价格还算可以。我买的时候目测是比米 6 稍微便宜那么一点，作为贫困人口当然就是选个便宜的完事了。<br>不过事后想想，其实就砍口垒用不了 835 那么好的 soc, 虽然是前代旗舰，但是总归功耗下不去，续航方面就会比较尴尬，特别还是二手机子。<br>嘛，但是也不是什么坏选择，好好用咯。</p><h2 id="开始折腾"><a href="#开始折腾" class="headerlink" title="开始折腾"></a>开始折腾</h2><p>淘宝上直接二手下单，没什么好说的。屏幕无坏点无烧屏，运气还算不错。附赠一条 Type-C, 一张钢化膜，一个硅胶壳。<br><img src="/images/blog/2020-01-28-23-08-47.png" alt="LGV30"></p><blockquote><p>这其实是用了一段时间了。<br>由于这东西的背面是指纹收集器，所以刚拿到手的时候背面就已经惨不忍睹。<br>正面没有工具我也懒得去贴那张钢化膜了。</p></blockquote><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>其实原生的 LG 系统就很接近原生，只是当时还是 Android 9, 我还是比较希望到 10, 但是后来还是发现 LOS 非官方版的 Android 10 有问题，wifi 有概率会无法启动，所以只能刷着 Android 9.</p><p>按照 xda 上面的 <a href="https://forum.xda-developers.com/lg-v30/development/rom-lineageos-15-1-t3789793">帖子</a>, 一步步按照教程来做，刷入的时候没什么大问题，只要记得该清的东西都清掉就好。<br>顺带一提，因为这个机子店家帮我解锁好了 Bootloader, 所以开机的时候会出现一个警告页面。然后我试了好一会儿才知道怎么进 recovery.</p><p>我一开始是刷了 LOS17, 也就是 Android 10 版本的 LOS, 指引在 <a href="https://forum.xda-developers.com/showpost.php?p=80271901&postcount=1580">这里</a>. 刷完之后很不幸地我遇到了他们一直在烦恼的有些人 wifi 无法使用的问题，于是只能刷回 Android 9 版本的 LOS 16. 然后就遇到了摄像头无法启动的问题。无论是自带的还是 Google play 里下载的打开之后摄像头都是黑的。找了好久终于在 xda 里找到了 <a href="https://forum.xda-developers.com/showpost.php?s=5f9a053ba3b8c8950bad675670d4698d&p=80401931&postcount=1664">解决方法</a>. 按照流程走，总算是打开了这东西的摄像头。</p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>LOS 中没有 Google 相关的软件，Google 的那个框架和应用商店都没有，所以还需要安装 open Gapp 的 <a href="https://opengapps.org/">包</a>.</p><p>然后就是代理。既然这东西要砍口垒，那么代理就是必不可少的。其实安卓和 iOS 代理软件遇到的共同问题就是，可能会因为两个系统的内存清理机制而被杀掉进程，进程被杀了代理自然也就断了。所以当你的机器占用很高很卡的时候有可能会出现代理断掉的情况。Android 这边的解决方法之一就是将代理软件转成系统程序。这个操作可以用 Magisk 中的 App Systemizer 来实现。在 Magisk 中安装上述模块，然后选一款终端软件（比方说 Termux 之类的）, 输入如下命令。</p><blockquote><p>su<br>systemize</p></blockquote><p>然后按照提示操作即可。列出所有应用，输入代理应用（当然，其他应用也可以用这种方法变为系统应用）的编号，选择储存路径，这样就可以将代理软件变为系统程序。然后按照提示退出。<br>之后就尽情体验一下 Android 的生态吧。对我来说首先要安装的肯定是 Tele… 不是，是 Ehv… 也不对，是 Kcanotify 泥潭魔改版！能砍口垒了之后就能做一些骚操作比方说一边看剧一边肝船什么的，毕竟 iPhone 现在好像还没有分屏这种东西。<br>当然在我买这手机的时候，Telegram 被封禁的频道还不能在 iOS 上看，所以还是有必要装的。当然 EHviewer 是 Android 独占对吧？大家都懂的（逃</p><h2 id="使用感想"><a href="#使用感想" class="headerlink" title="使用感想"></a>使用感想</h2><p>写这篇文章的时候用了也有三个多快四个月了。确实是比之前我用的那个沙雕荣耀要开心多了。起码别人能在安卓上的我差不多有都能做，日常砍口垒看本子什么的也完全没有问题。不过除此以外我要用安卓的地方也不多就是了。其他日常我还是喜欢用 iPhone 的 (</p><p>续航其实不算特别好，标称 3300 mAh 的电池只剩下了 2800+ mAh（用 AccuBattery 测出来的）, 所以看什么时候续航开始尿崩的时候就考虑去换一个电池比较好。好在电池还是好买的，淘宝上三十左右就有。<br>然后就是单手操作者的怨念，虽然这是我的第一个类全面屏设备，但是我还是觉得太太太太大了这屏幕。并且这东西的指纹识别和电源键是同一个按键，用的我很不习惯。毕竟 iPhone 有 home 键和 电源键两个可以唤醒屏幕。不过我又发现微软启动器可以设置双击唤醒和锁屏，于是就习惯了。我觉得这个功能反而比 iPhone 的要好，而且我也不是很喜欢抬手亮屏这个功能，还是双击比较爽。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实这篇文章比较水，关键是我也不知道有什么好写的，所以只能写点感想之类东西。疫病期间，买的手柄还没到所以不能玩冰原，只能群星和下棋作乐，偶尔提起精神来码码字，总算是发出了这篇文章。</p>]]></content>
    
    
    <summary type="html">使用安卓就像是玩了很久人族之后换神族或者虫族</summary>
    
    
    
    <category term="产品体验" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    
    <category term="手机" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E6%89%8B%E6%9C%BA/"/>
    
    
    <category term="Phone" scheme="https://blog.rekidunois.cc/tags/Phone/"/>
    
    <category term="LG" scheme="https://blog.rekidunois.cc/tags/LG/"/>
    
    <category term="835" scheme="https://blog.rekidunois.cc/tags/835/"/>
    
    <category term="二手" scheme="https://blog.rekidunois.cc/tags/%E4%BA%8C%E6%89%8B/"/>
    
    <category term="Android" scheme="https://blog.rekidunois.cc/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>码农的毕业笔记本——Y9000X</title>
    <link href="https://blog.rekidunois.cc/2020/01/y9000x-Reviews/"/>
    <id>https://blog.rekidunois.cc/2020/01/y9000x-Reviews/</id>
    <published>2020-01-24T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>轻薄，标压，性能，”我的对手很少”, 但是几乎没人能打得过我</p></blockquote><p>笔记本电脑绝对是 PC 工业史上的一颗璀璨明珠。计算机从最开始占地一个房间，到可以摆在桌面上，到可以塞到手提袋里随时拿走，这样的发展历程已经过去了几十年。当影视作品中表现一个人在“工作”的时候，笔记本电脑也是高概率会出现的道具之一。<br>很长一段时间，我已经接受了这样的设定：想要轻薄，性能就不高；想要高性能，笔记本就会很厚重，并且续航很低。如果你又要轻薄，又要高续航，还需要高性能？请选择火星牌笔记本（雾）</p><p>但是其实这些需求中，“高性能”这一项对于每个人的定义可能都是不同的。如果你要玩游戏，或者机器学习什么的，你可能需要一个比较强的 GPU, 不过对于我来说，我只希望写代码的时候 IDE 能反应快一点，开浏览器的时候能多开几十个标签页，然后编译的时候花的时间能少一点而已。对，我可能只需要一颗强壮的 CPU.</p><p>只是市面上其实很少有这种只偏重 CPU 的产品。如果选择一款搭载标压移动版 CPU 的笔记本，第一它会非常厚重，第二它的散热还需要兼顾 GPU. 而且在我选购游戏本的那个时代，其实 16G 的内存和大号 SSD 其实非常的不普及，特别是 NVMe 的 SSD. 所以在日常使用中其实这类游戏本的体验，只能说是差强人意。如果我要稍微兼顾一点便携性，比方说过年的时候带回老家，就会非常痛苦。我一个朋友甚至因为带游戏本回家把背包都背得开裂了。</p><p>那么，有没有这么一款有强劲的 CPU 性能，没有独显，然后可以做到非常轻薄的笔记本呢？答案已经写在标题里了，那就是联想出品的 Y9000X.</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>CPU 最高可以选配 i9-9880H, 我手上这款是 i7-9750H. 显卡则使用的集成显卡，没有独显。<br>内存最高可选配 32G 双通道版本。但是这款机型的所有显卡都是焊在主板上的，并且没有额外的内存插槽，所以无法自行升级内存。但是这款机型的最低配也是 16G 起步，一般来说是比较足够。但是即使加钱到 32G 也不贵，只是必须和 4k UHD 屏幕一起买就是了。</p><p>储存设备方面，它只有一块 SSD, 我手上的是来自三星的 1T NVMe SSD. 最高可选配 2T 版本。作为一个笔记本来说，这个大小应该是够用的。如果有大量冷数据或者视频之类的，建议考虑储存在 NAS 或者网盘中可能会比较合适。如果还是觉得不够，机器搭配了一个 M2 接口以供用户自行添加硬盘。</p><p><img src="/images/blog/2019-11-12-00-50-41.png" alt="CrystalDiskMark"></p><blockquote><p>应该是我用过的最好的硬盘了？</p></blockquote><p>屏幕可以选择 1080P 或者 4k 分辨率的两个版本。我选择了 1080P 版本，其实稍微有点后悔，不过也还好。这块屏幕给人的感觉还是不错的，亮度很高。</p><p><img src="/images/blog/2020-01-24-00-44-32.png" alt="B site"></p><blockquote><p>拍照技术不好，不知道能不能看出来</p></blockquote><p>IO 接口方面，它提供了两个 USB 3.1 Type-A 接口，其中一个支持关机充电。只是这两个接口都位于机身的后面，屁股的位置上。所以要插拔不是很容易，我平时都是用来插诸如无线鼠标一类的设备。</p><p><img src="/images/blog/2020-01-24-12-16-50.png" alt="屁股"></p><blockquote><p>左边那个是罗技 G304 的接收器，右边那个有电池标志的接口是支持关机充电的。<br>但是平时没啥用，所以拿个塞子塞住</p></blockquote><p>然后在她的右边还有（非常先进的）3.5mm 耳机孔，还附带一个读卡器，这应该能方便摄影师朋友们导出摄影素材。</p><p><img src="/images/blog/2020-01-24-12-22-15.png" alt="right"></p><p>左边它提供了轻薄本必备的雷电 3 接口，而且还有两个。这两个接口共享 40Gbps 的带宽。当然如果你只用其中一个，也可以独享 40Gbps 的带宽，因为一般我们会需要一个 Type-C 接口来充电。不然的话可能会让单个 Dock 非常烫。</p><p><img src="/images/blog/2020-01-24-12-23-26.png" alt="left"></p><p>Y9000X 搭载的是全尺寸的键盘，除了有小键盘以外，还有尺寸正常的方向键，而不是通常的那种将上下压缩得很小的方向键。只是我感觉键盘似乎偏上了一点，下方的距离非常开阔，导致打字如果带了手表或者手环，下方会顶着这个东西，可能不是很舒服。手臂吊起来打字又会很累。</p><p><img src="/images/blog/2020-01-24-12-24-36.png" alt="keyboard"></p><p>键盘手感还算可以，和机身的金属质感很搭。我个人比较喜欢她亲戚隔壁 ThinkPad 的手感，但是如果要打比方的话，这个东西有点像机械里的茶轴，然后 ThinkPad 的键盘有点像红轴。电源键同时也是指纹识别配件，可以搭配 Windows 10 的 Windows hello 使用。触控板中规中矩，是一整块的状态，但是不像 MacBook 一样到处都可以按压，属于那种隐藏式的左右键按压。</p><p>本机搭载的摄像头是那种位于屏幕下方的鼻孔摄像头，但是联想很贴心地为它配备了物理开关。这一点在 ThinkPad 系列似乎也成了标配，应该得到鼓励。</p><p><img src="/images/blog/2020-01-24-12-26-32.png" alt="webcam"></p><p>由于没有搭载独显，也没有奇奇怪怪的认证，所以这台机器的 C 面非常干净。拿到手的时候只有两个贴纸，而且由于采用的是金属磨砂材质，这些贴纸撕起来也非常轻松，并且不会留下什么痕迹。对于强迫症来说是非常舒服的事情。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>这台机器的一大卖点是，只搭载标压移动 U 的情况下，还为其配备了四个散热风扇，散热用料非常足。（于是声音也非常大，简直起飞）.</p><p>随手跑了一下 CeniBench, 得分居然比 7700K 还要高</p><p><img src="/images/blog/2019-11-12-00-49-16.png" alt="CeniBench"></p><p>16G 双通内存还是很爽的，减少访问虚拟内存的频率那就能减少卡顿。频率 2667 （咦不应该是 2666 嘛）, 不知道能不能艹一艹到 3200 （逃</p><p><img src="/images/blog/2020-01-24-12-33-58.png" alt="memory"></p><h2 id="使用感想"><a href="#使用感想" class="headerlink" title="使用感想"></a>使用感想</h2><ul><li>便携</li></ul><p>这篇文章从我买 Y9000X 开始，大概是十一月份左右，到现在一月份，担任主力开发机两个半月。除了丢在公司写代码以外，偶尔也会蹭了公司网下载的东西然后拿回家里去。这一点我就发现她是真的占地方小而且轻啊。如果我不嫌插线拔线麻烦甚至可以一直拿着这个东西上下班通勤，不管是坐公共交通还是骑自行车，我觉得带着都不成问题。</p><ul><li>发热</li></ul><p>热嘛确实是热。不过在键盘区域感受不是很大。电源非常热，这个 95W 的电源烫的要死，而且还不好带。但是市面上所售这个功率的 PD 充电头其实并不多，我看唯一适合便携的似乎是苹果的那个新 16 寸 Macbook Pro 用的充电插头。但是那个要小六百块钱了，emmm 贫穷它缠绕着我。</p><ul><li>续航</li></ul><p>开着高性能但是还是用电池的时候这 CPU 还在疯狂睿频到 4.0 左右，于是续航就尿崩，大概一两个小时左右。然后开了节能和节电模式之后能续到四个小时左右，在高铁上玩一路大概没啥问题？（而且高铁上还都有插座）. 除此以外我似乎没有啥需要脱离电源使用的情况了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用 Y9000X 也快三个月了。上一个使用的笔记本是我拿来当台式机用的神船 Z6, 使用三个月的时候我应该刚开始大学生活。而距离那时已经过去了四年多了，笔记本这一产品在我看来也有了相当程度的变化。特别是 SSD 以及内存颗粒价格的降低，将所有类型笔记本性能都增加到了非常高的一个高度。Y9000X 在这三个月里已经基本覆盖了我所有的使用场景，工作的时候用来写代码，然后团建的时候带出去旅游，春节回家带着她坐火车，都没有什么大问题。如果说一定要购买的配件，那我觉得可能需要一个显卡坞和一块 1660super 放在老家里，这样我现在也能快乐冰原了（逃</p>]]></content>
    
    
    <summary type="html">满足两大爱好之一可能再也不需要买新的电脑了。</summary>
    
    
    
    <category term="产品体验" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/"/>
    
    <category term="笔记本" scheme="https://blog.rekidunois.cc/categories/%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
    
    <category term="Laptop" scheme="https://blog.rekidunois.cc/tags/Laptop/"/>
    
    <category term="Lenovo" scheme="https://blog.rekidunois.cc/tags/Lenovo/"/>
    
    <category term="Intel" scheme="https://blog.rekidunois.cc/tags/Intel/"/>
    
    <category term="Coding" scheme="https://blog.rekidunois.cc/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>2019~2020（己亥年~庚子年）新年假期</title>
    <link href="https://blog.rekidunois.cc/2020/01/Lunar-New-Year-Plan/"/>
    <id>https://blog.rekidunois.cc/2020/01/Lunar-New-Year-Plan/</id>
    <published>2020-01-16T16:00:00.000Z</published>
    <updated>2023-01-19T12:59:32.945Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新年明けましておめでとうございます</p></blockquote><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>马上就要新年啦~~. 新房子也基本搞定了，新年之前的版本也基本没什么大问题了。于是还是希望在自己正式工作之后的第一个春节能有充实的生活。<br>说是春节，其实基本算是最长的假期了。除了过春节以外，还是有相当多的个人时间。如果能利用这些时间做一些平时一直找不到时间做的事情也不错吧。于是就想出了这个东西。<br>因为回家带的电脑没啥 GPU 性能，所以也最多就能下下棋什么的。（不然我好想肝冰原啊！!!) 所以这次回去的主要目标就是要做用这本 Y9000X 能够完成的事情。</p><h2 id="博客更新"><a href="#博客更新" class="headerlink" title="博客更新"></a>博客更新</h2><p>editing 里面已经积了一大堆想要写但是没写完的东西了，所以终于有时间好好写写博客。希望能有所更新吧！</p><ul><li>Y9000X 的使用报告</li><li>LG-G30 的折腾记录</li><li>关于作品中出现的专业知识相关的想法</li><li>沙雕 QT 的吐槽</li><li>2008 年和 2018 年的回顾总结<ul><li>2008 年</li><li>2018 年</li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>最近发现程序员要提升效率最好的办法，其实就是所谓的 “时间魔法”——让过去的自己来帮自己完成工作。说人话就是 “代码复用” 啦。<br>为此程序员其实要多积累自己的代码，并且将其封装成易于使用的库，需要的时候就大胆的 <code>new</code> 或者注入，是坠吼的。</p><ul><li>QT 的控件继承提升用类框架</li><li>Windows 的常用 API 的封装计划<ul><li>wifi 相关</li><li>硬件信息相关</li><li>系统配置相关</li><li>命令行操作</li><li>让 C# 也能自由地使用吧！<ul><li>COM</li><li>C# 的依赖库<ul><li>nuget 包</li></ul></li></ul></li></ul></li></ul><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>前面提到了复用，这却并非是想要做就能做到的事情，需要对代码设计下大量的功夫。现在我对 C++ 和 C# 还有 TypeScript 的了解还相当不够深入。有很多特性都没用到，还是要加强这方面的学习。</p><ul><li>继承</li><li>多态</li><li>泛型</li></ul><p>（所以到底如何快速地在需要大量的 switch 或者 if-else 的逻辑中随时扩展功能呢，在线等，急）</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>UI 方面还是希望能系统学习一下 WPF, 特别是 XAML 的用法。<br>然后非常重要的就是依赖注入啦。Asp.net Core 有自带的我曾经使用过一段时间，WPF 或者 UWP 或者 Win32 应用自带的是肯定没有的。于是这里就要用到 <a href="https://autofaccn.readthedocs.io/zh/latest/">AutoFac</a> 啦。首先是可以为没有自带的开发框架带来依赖注入这样的好东西。其次，即使是自带依赖注入功能的框架，也能通过用同一个库来提高统一性，减少需要学习的东西。<br>最后，如果从零开始一个项目，不管什么项目一定是有通用的东西。可以对这方面作出总结，并且在工作中应用。</p><ul><li>用 AutoFac 来学习如何对项目进行规划</li><li>学习如何使用 XAML 来对单页进行布局吧</li><li>总结在项目中一定会使用到的代码并试着做成静态库吧</li></ul><h2 id="长假之后"><a href="#长假之后" class="headerlink" title="长假之后"></a>长假之后</h2><p>新的一年当然想做的事情有很多很多。上面说的事情肯定一个长假做不完。但是长假之后还有长假之后才能做的事情，这里也稍微列一下。</p><ul><li>冰原通关！!</li><li>检查牙齿，比方说洗牙之类的。</li><li>全面的身体检查</li><li>买新桌子和椅子，对自己的桌面空间进行重新设计<ul><li>显示器支架</li><li>藏线和放游戏机用的桌上架子</li><li>主机架</li></ul></li><li>修显示器</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写着写着就写了好大一堆。感觉肯定不是一个长假就能做完的事情。嘛新的一年也是需要计划的吧，可以丢到新年计划中。<br>那么，就是这样，给自己拜年啦~</p>]]></content>
    
    
    <summary type="html">感觉我平时都不会做这种事情（</summary>
    
    
    
    <category term="计划" scheme="https://blog.rekidunois.cc/categories/%E8%AE%A1%E5%88%92/"/>
    
    <category term="进度" scheme="https://blog.rekidunois.cc/categories/%E8%AE%A1%E5%88%92/%E8%BF%9B%E5%BA%A6/"/>
    
    
    <category term="Plan" scheme="https://blog.rekidunois.cc/tags/Plan/"/>
    
    <category term="Lunar New Year" scheme="https://blog.rekidunois.cc/tags/Lunar-New-Year/"/>
    
  </entry>
  
</feed>
